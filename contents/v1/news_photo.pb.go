// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.2
// source: contents/v1/news_photo.proto

package contents_grpc

import (
	_ "github.com/dvp-dev/matamata-grpc-generated-go/admin/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsPhotoGetListRequest_Sort int32

const (
	NewsPhotoGetListRequest_TITLE_ASCENDING_UNSPECIFIED NewsPhotoGetListRequest_Sort = 0
	NewsPhotoGetListRequest_TITLE_DESCENDING            NewsPhotoGetListRequest_Sort = 1
	NewsPhotoGetListRequest_OLDEST                      NewsPhotoGetListRequest_Sort = 2
	NewsPhotoGetListRequest_NEWEST                      NewsPhotoGetListRequest_Sort = 3
)

// Enum value maps for NewsPhotoGetListRequest_Sort.
var (
	NewsPhotoGetListRequest_Sort_name = map[int32]string{
		0: "TITLE_ASCENDING_UNSPECIFIED",
		1: "TITLE_DESCENDING",
		2: "OLDEST",
		3: "NEWEST",
	}
	NewsPhotoGetListRequest_Sort_value = map[string]int32{
		"TITLE_ASCENDING_UNSPECIFIED": 0,
		"TITLE_DESCENDING":            1,
		"OLDEST":                      2,
		"NEWEST":                      3,
	}
)

func (x NewsPhotoGetListRequest_Sort) Enum() *NewsPhotoGetListRequest_Sort {
	p := new(NewsPhotoGetListRequest_Sort)
	*p = x
	return p
}

func (x NewsPhotoGetListRequest_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsPhotoGetListRequest_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_contents_v1_news_photo_proto_enumTypes[0].Descriptor()
}

func (NewsPhotoGetListRequest_Sort) Type() protoreflect.EnumType {
	return &file_contents_v1_news_photo_proto_enumTypes[0]
}

func (x NewsPhotoGetListRequest_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewsPhotoGetListRequest_Sort.Descriptor instead.
func (NewsPhotoGetListRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{5, 0}
}

type ArticlePhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageLink    string `protobuf:"bytes,2,opt,name=image_link,json=imageLink,proto3" json:"image_link,omitempty"`
	ImageCaption string `protobuf:"bytes,3,opt,name=image_caption,json=imageCaption,proto3" json:"image_caption,omitempty"`
}

func (x *ArticlePhoto) Reset() {
	*x = ArticlePhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticlePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticlePhoto) ProtoMessage() {}

func (x *ArticlePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticlePhoto.ProtoReflect.Descriptor instead.
func (*ArticlePhoto) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{0}
}

func (x *ArticlePhoto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticlePhoto) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *ArticlePhoto) GetImageCaption() string {
	if x != nil {
		return x.ImageCaption
	}
	return ""
}

type NewsPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId_1      int32                  `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2      int32                  `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3      int32                  `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Title             string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Lead              string                 `protobuf:"bytes,6,opt,name=lead,proto3" json:"lead,omitempty"`
	Content           string                 `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	ImageCoverUrl     string                 `protobuf:"bytes,8,opt,name=image_cover_url,json=imageCoverUrl,proto3" json:"image_cover_url,omitempty"`
	ImageCoverCaption string                 `protobuf:"bytes,9,opt,name=image_cover_caption,json=imageCoverCaption,proto3" json:"image_cover_caption,omitempty"`
	Slug              string                 `protobuf:"bytes,14,opt,name=slug,proto3" json:"slug,omitempty"`
	Status            ArticleStatus          `protobuf:"varint,10,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	SectionHomepage   ArticleSectionHomepage `protobuf:"varint,13,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PublishedAt       *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Photos            []*ArticlePhoto        `protobuf:"bytes,55,rep,name=photos,proto3" json:"photos,omitempty"`
	Tags              []*Tag                 `protobuf:"bytes,51,rep,name=tags,proto3" json:"tags,omitempty"`
	Category1         *Category1             `protobuf:"bytes,52,opt,name=category1,proto3" json:"category1,omitempty"`
	Category2         *Category2             `protobuf:"bytes,53,opt,name=category2,proto3" json:"category2,omitempty"`
	Category3         *Category3             `protobuf:"bytes,54,opt,name=category3,proto3" json:"category3,omitempty"`
	Credits           []*ArticleCredit       `protobuf:"bytes,101,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *NewsPhoto) Reset() {
	*x = NewsPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhoto) ProtoMessage() {}

func (x *NewsPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhoto.ProtoReflect.Descriptor instead.
func (*NewsPhoto) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{1}
}

func (x *NewsPhoto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsPhoto) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *NewsPhoto) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *NewsPhoto) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *NewsPhoto) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsPhoto) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *NewsPhoto) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsPhoto) GetImageCoverUrl() string {
	if x != nil {
		return x.ImageCoverUrl
	}
	return ""
}

func (x *NewsPhoto) GetImageCoverCaption() string {
	if x != nil {
		return x.ImageCoverCaption
	}
	return ""
}

func (x *NewsPhoto) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewsPhoto) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *NewsPhoto) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *NewsPhoto) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NewsPhoto) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NewsPhoto) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *NewsPhoto) GetPhotos() []*ArticlePhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *NewsPhoto) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NewsPhoto) GetCategory1() *Category1 {
	if x != nil {
		return x.Category1
	}
	return nil
}

func (x *NewsPhoto) GetCategory2() *Category2 {
	if x != nil {
		return x.Category2
	}
	return nil
}

func (x *NewsPhoto) GetCategory3() *Category3 {
	if x != nil {
		return x.Category3
	}
	return nil
}

func (x *NewsPhoto) GetCredits() []*ArticleCredit {
	if x != nil {
		return x.Credits
	}
	return nil
}

type NewsPhotoCreateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId_1      int32                        `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2      int32                        `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3      int32                        `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Title             string                       `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Lead              string                       `protobuf:"bytes,6,opt,name=lead,proto3" json:"lead,omitempty"`
	Content           string                       `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	ImageCoverUrl     string                       `protobuf:"bytes,8,opt,name=image_cover_url,json=imageCoverUrl,proto3" json:"image_cover_url,omitempty"`
	ImageCoverCaption string                       `protobuf:"bytes,9,opt,name=image_cover_caption,json=imageCoverCaption,proto3" json:"image_cover_caption,omitempty"`
	Status            ArticleStatus                `protobuf:"varint,10,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	SectionHomepage   ArticleSectionHomepage       `protobuf:"varint,13,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	Photos            []*ArticlePhoto              `protobuf:"bytes,53,rep,name=photos,proto3" json:"photos,omitempty"`
	TagIds            []int32                      `protobuf:"varint,51,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	Credits           []*ArticleCreditCreateUpdate `protobuf:"bytes,52,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *NewsPhotoCreateUpdate) Reset() {
	*x = NewsPhotoCreateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoCreateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoCreateUpdate) ProtoMessage() {}

func (x *NewsPhotoCreateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoCreateUpdate.ProtoReflect.Descriptor instead.
func (*NewsPhotoCreateUpdate) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{2}
}

func (x *NewsPhotoCreateUpdate) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *NewsPhotoCreateUpdate) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *NewsPhotoCreateUpdate) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *NewsPhotoCreateUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsPhotoCreateUpdate) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *NewsPhotoCreateUpdate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsPhotoCreateUpdate) GetImageCoverUrl() string {
	if x != nil {
		return x.ImageCoverUrl
	}
	return ""
}

func (x *NewsPhotoCreateUpdate) GetImageCoverCaption() string {
	if x != nil {
		return x.ImageCoverCaption
	}
	return ""
}

func (x *NewsPhotoCreateUpdate) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *NewsPhotoCreateUpdate) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *NewsPhotoCreateUpdate) GetPhotos() []*ArticlePhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *NewsPhotoCreateUpdate) GetTagIds() []int32 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *NewsPhotoCreateUpdate) GetCredits() []*ArticleCreditCreateUpdate {
	if x != nil {
		return x.Credits
	}
	return nil
}

type NewsPhotoGetOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SearchBySlug string `protobuf:"bytes,2,opt,name=search_by_slug,json=searchBySlug,proto3" json:"search_by_slug,omitempty"`
}

func (x *NewsPhotoGetOneRequest) Reset() {
	*x = NewsPhotoGetOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoGetOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoGetOneRequest) ProtoMessage() {}

func (x *NewsPhotoGetOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoGetOneRequest.ProtoReflect.Descriptor instead.
func (*NewsPhotoGetOneRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{3}
}

func (x *NewsPhotoGetOneRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsPhotoGetOneRequest) GetSearchBySlug() string {
	if x != nil {
		return x.SearchBySlug
	}
	return ""
}

type NewsPhotoGetOneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsPhoto `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsPhotoGetOneResponse) Reset() {
	*x = NewsPhotoGetOneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoGetOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoGetOneResponse) ProtoMessage() {}

func (x *NewsPhotoGetOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoGetOneResponse.ProtoReflect.Descriptor instead.
func (*NewsPhotoGetOneResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{4}
}

func (x *NewsPhotoGetOneResponse) GetData() *NewsPhoto {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsPhotoGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          ArticleStatus                `protobuf:"varint,1,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	StatusMultiple  []ArticleStatus              `protobuf:"varint,9,rep,packed,name=status_multiple,json=statusMultiple,proto3,enum=contents.v1.ArticleStatus" json:"status_multiple,omitempty"`
	SectionHomepage ArticleSectionHomepage       `protobuf:"varint,10,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	CategoryId_1    int32                        `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2    int32                        `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3    int32                        `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Search          string                       `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	Page            int32                        `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	ContentPerPage  int32                        `protobuf:"varint,8,opt,name=content_per_page,json=contentPerPage,proto3" json:"content_per_page,omitempty"`
	SortBy          NewsPhotoGetListRequest_Sort `protobuf:"varint,5,opt,name=sort_by,json=sortBy,proto3,enum=contents.v1.NewsPhotoGetListRequest_Sort" json:"sort_by,omitempty"`
}

func (x *NewsPhotoGetListRequest) Reset() {
	*x = NewsPhotoGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoGetListRequest) ProtoMessage() {}

func (x *NewsPhotoGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoGetListRequest.ProtoReflect.Descriptor instead.
func (*NewsPhotoGetListRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{5}
}

func (x *NewsPhotoGetListRequest) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *NewsPhotoGetListRequest) GetStatusMultiple() []ArticleStatus {
	if x != nil {
		return x.StatusMultiple
	}
	return nil
}

func (x *NewsPhotoGetListRequest) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *NewsPhotoGetListRequest) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *NewsPhotoGetListRequest) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *NewsPhotoGetListRequest) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *NewsPhotoGetListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *NewsPhotoGetListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NewsPhotoGetListRequest) GetContentPerPage() int32 {
	if x != nil {
		return x.ContentPerPage
	}
	return 0
}

func (x *NewsPhotoGetListRequest) GetSortBy() NewsPhotoGetListRequest_Sort {
	if x != nil {
		return x.SortBy
	}
	return NewsPhotoGetListRequest_TITLE_ASCENDING_UNSPECIFIED
}

type NewsPhotoGetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*NewsPhoto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	MaxPage int32        `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	Count   int32        `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NewsPhotoGetListResponse) Reset() {
	*x = NewsPhotoGetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoGetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoGetListResponse) ProtoMessage() {}

func (x *NewsPhotoGetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoGetListResponse.ProtoReflect.Descriptor instead.
func (*NewsPhotoGetListResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{6}
}

func (x *NewsPhotoGetListResponse) GetData() []*NewsPhoto {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NewsPhotoGetListResponse) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *NewsPhotoGetListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type NewsPhotoGetListStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *NewsPhoto `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxPage int32      `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	Count   int32      `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NewsPhotoGetListStreamResponse) Reset() {
	*x = NewsPhotoGetListStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoGetListStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoGetListStreamResponse) ProtoMessage() {}

func (x *NewsPhotoGetListStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoGetListStreamResponse.ProtoReflect.Descriptor instead.
func (*NewsPhotoGetListStreamResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{7}
}

func (x *NewsPhotoGetListStreamResponse) GetData() *NewsPhoto {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NewsPhotoGetListStreamResponse) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *NewsPhotoGetListStreamResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type NewsPhotoCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsPhotoCreateUpdate `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsPhotoCreateRequest) Reset() {
	*x = NewsPhotoCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoCreateRequest) ProtoMessage() {}

func (x *NewsPhotoCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoCreateRequest.ProtoReflect.Descriptor instead.
func (*NewsPhotoCreateRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{8}
}

func (x *NewsPhotoCreateRequest) GetData() *NewsPhotoCreateUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsPhotoCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsPhoto `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsPhotoCreateResponse) Reset() {
	*x = NewsPhotoCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoCreateResponse) ProtoMessage() {}

func (x *NewsPhotoCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoCreateResponse.ProtoReflect.Descriptor instead.
func (*NewsPhotoCreateResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{9}
}

func (x *NewsPhotoCreateResponse) GetData() *NewsPhoto {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsPhotoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *NewsPhotoCreateUpdate `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsPhotoUpdateRequest) Reset() {
	*x = NewsPhotoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoUpdateRequest) ProtoMessage() {}

func (x *NewsPhotoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoUpdateRequest.ProtoReflect.Descriptor instead.
func (*NewsPhotoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{10}
}

func (x *NewsPhotoUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsPhotoUpdateRequest) GetData() *NewsPhotoCreateUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsPhotoUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsPhoto `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsPhotoUpdateResponse) Reset() {
	*x = NewsPhotoUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoUpdateResponse) ProtoMessage() {}

func (x *NewsPhotoUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoUpdateResponse.ProtoReflect.Descriptor instead.
func (*NewsPhotoUpdateResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{11}
}

func (x *NewsPhotoUpdateResponse) GetData() *NewsPhoto {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsPhotoDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SoftDelete bool  `protobuf:"varint,2,opt,name=soft_delete,json=softDelete,proto3" json:"soft_delete,omitempty"`
}

func (x *NewsPhotoDeleteRequest) Reset() {
	*x = NewsPhotoDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoDeleteRequest) ProtoMessage() {}

func (x *NewsPhotoDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoDeleteRequest.ProtoReflect.Descriptor instead.
func (*NewsPhotoDeleteRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{12}
}

func (x *NewsPhotoDeleteRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsPhotoDeleteRequest) GetSoftDelete() bool {
	if x != nil {
		return x.SoftDelete
	}
	return false
}

type NewsPhotoDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsPhoto `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsPhotoDeleteResponse) Reset() {
	*x = NewsPhotoDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_photo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPhotoDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPhotoDeleteResponse) ProtoMessage() {}

func (x *NewsPhotoDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_photo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPhotoDeleteResponse.ProtoReflect.Descriptor instead.
func (*NewsPhotoDeleteResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_photo_proto_rawDescGZIP(), []int{13}
}

func (x *NewsPhotoDeleteResponse) GetData() *NewsPhoto {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_contents_v1_news_photo_proto protoreflect.FileDescriptor

var file_contents_v1_news_photo_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x77, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x62, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x07, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x52, 0x09, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x32, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x32, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x12, 0x34, 0x0a, 0x09,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x33, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x65, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xb1, 0x04, 0x0a, 0x15, 0x4e, 0x65, 0x77,
	0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e,
	0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x33, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x16,
	0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x45, 0x0a, 0x17,
	0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xbf, 0x04, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x32,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x55,
	0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x4c, 0x44, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x57,
	0x45, 0x53, 0x54, 0x10, 0x03, 0x22, 0x77, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7d,
	0x0a, 0x1e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77,
	0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a,
	0x16, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x45, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77,
	0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x49, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x4e, 0x65,
	0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x76, 0x70, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x61, 0x74, 0x61, 0x6d, 0x61, 0x74, 0x61,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contents_v1_news_photo_proto_rawDescOnce sync.Once
	file_contents_v1_news_photo_proto_rawDescData = file_contents_v1_news_photo_proto_rawDesc
)

func file_contents_v1_news_photo_proto_rawDescGZIP() []byte {
	file_contents_v1_news_photo_proto_rawDescOnce.Do(func() {
		file_contents_v1_news_photo_proto_rawDescData = protoimpl.X.CompressGZIP(file_contents_v1_news_photo_proto_rawDescData)
	})
	return file_contents_v1_news_photo_proto_rawDescData
}

var file_contents_v1_news_photo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_contents_v1_news_photo_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_contents_v1_news_photo_proto_goTypes = []interface{}{
	(NewsPhotoGetListRequest_Sort)(0),      // 0: contents.v1.NewsPhotoGetListRequest.Sort
	(*ArticlePhoto)(nil),                   // 1: contents.v1.ArticlePhoto
	(*NewsPhoto)(nil),                      // 2: contents.v1.NewsPhoto
	(*NewsPhotoCreateUpdate)(nil),          // 3: contents.v1.NewsPhotoCreateUpdate
	(*NewsPhotoGetOneRequest)(nil),         // 4: contents.v1.NewsPhotoGetOneRequest
	(*NewsPhotoGetOneResponse)(nil),        // 5: contents.v1.NewsPhotoGetOneResponse
	(*NewsPhotoGetListRequest)(nil),        // 6: contents.v1.NewsPhotoGetListRequest
	(*NewsPhotoGetListResponse)(nil),       // 7: contents.v1.NewsPhotoGetListResponse
	(*NewsPhotoGetListStreamResponse)(nil), // 8: contents.v1.NewsPhotoGetListStreamResponse
	(*NewsPhotoCreateRequest)(nil),         // 9: contents.v1.NewsPhotoCreateRequest
	(*NewsPhotoCreateResponse)(nil),        // 10: contents.v1.NewsPhotoCreateResponse
	(*NewsPhotoUpdateRequest)(nil),         // 11: contents.v1.NewsPhotoUpdateRequest
	(*NewsPhotoUpdateResponse)(nil),        // 12: contents.v1.NewsPhotoUpdateResponse
	(*NewsPhotoDeleteRequest)(nil),         // 13: contents.v1.NewsPhotoDeleteRequest
	(*NewsPhotoDeleteResponse)(nil),        // 14: contents.v1.NewsPhotoDeleteResponse
	(ArticleStatus)(0),                     // 15: contents.v1.ArticleStatus
	(ArticleSectionHomepage)(0),            // 16: contents.v1.ArticleSectionHomepage
	(*timestamppb.Timestamp)(nil),          // 17: google.protobuf.Timestamp
	(*Tag)(nil),                            // 18: contents.v1.Tag
	(*Category1)(nil),                      // 19: contents.v1.Category1
	(*Category2)(nil),                      // 20: contents.v1.Category2
	(*Category3)(nil),                      // 21: contents.v1.Category3
	(*ArticleCredit)(nil),                  // 22: contents.v1.ArticleCredit
	(*ArticleCreditCreateUpdate)(nil),      // 23: contents.v1.ArticleCreditCreateUpdate
}
var file_contents_v1_news_photo_proto_depIdxs = []int32{
	15, // 0: contents.v1.NewsPhoto.status:type_name -> contents.v1.ArticleStatus
	16, // 1: contents.v1.NewsPhoto.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	17, // 2: contents.v1.NewsPhoto.created_at:type_name -> google.protobuf.Timestamp
	17, // 3: contents.v1.NewsPhoto.updated_at:type_name -> google.protobuf.Timestamp
	17, // 4: contents.v1.NewsPhoto.published_at:type_name -> google.protobuf.Timestamp
	1,  // 5: contents.v1.NewsPhoto.photos:type_name -> contents.v1.ArticlePhoto
	18, // 6: contents.v1.NewsPhoto.tags:type_name -> contents.v1.Tag
	19, // 7: contents.v1.NewsPhoto.category1:type_name -> contents.v1.Category1
	20, // 8: contents.v1.NewsPhoto.category2:type_name -> contents.v1.Category2
	21, // 9: contents.v1.NewsPhoto.category3:type_name -> contents.v1.Category3
	22, // 10: contents.v1.NewsPhoto.credits:type_name -> contents.v1.ArticleCredit
	15, // 11: contents.v1.NewsPhotoCreateUpdate.status:type_name -> contents.v1.ArticleStatus
	16, // 12: contents.v1.NewsPhotoCreateUpdate.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	1,  // 13: contents.v1.NewsPhotoCreateUpdate.photos:type_name -> contents.v1.ArticlePhoto
	23, // 14: contents.v1.NewsPhotoCreateUpdate.credits:type_name -> contents.v1.ArticleCreditCreateUpdate
	2,  // 15: contents.v1.NewsPhotoGetOneResponse.data:type_name -> contents.v1.NewsPhoto
	15, // 16: contents.v1.NewsPhotoGetListRequest.status:type_name -> contents.v1.ArticleStatus
	15, // 17: contents.v1.NewsPhotoGetListRequest.status_multiple:type_name -> contents.v1.ArticleStatus
	16, // 18: contents.v1.NewsPhotoGetListRequest.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	0,  // 19: contents.v1.NewsPhotoGetListRequest.sort_by:type_name -> contents.v1.NewsPhotoGetListRequest.Sort
	2,  // 20: contents.v1.NewsPhotoGetListResponse.data:type_name -> contents.v1.NewsPhoto
	2,  // 21: contents.v1.NewsPhotoGetListStreamResponse.data:type_name -> contents.v1.NewsPhoto
	3,  // 22: contents.v1.NewsPhotoCreateRequest.data:type_name -> contents.v1.NewsPhotoCreateUpdate
	2,  // 23: contents.v1.NewsPhotoCreateResponse.data:type_name -> contents.v1.NewsPhoto
	3,  // 24: contents.v1.NewsPhotoUpdateRequest.data:type_name -> contents.v1.NewsPhotoCreateUpdate
	2,  // 25: contents.v1.NewsPhotoUpdateResponse.data:type_name -> contents.v1.NewsPhoto
	2,  // 26: contents.v1.NewsPhotoDeleteResponse.data:type_name -> contents.v1.NewsPhoto
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_contents_v1_news_photo_proto_init() }
func file_contents_v1_news_photo_proto_init() {
	if File_contents_v1_news_photo_proto != nil {
		return
	}
	file_contents_v1_tag_proto_init()
	file_contents_v1_category_proto_init()
	file_contents_v1_article_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contents_v1_news_photo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticlePhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoCreateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoGetOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoGetOneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoGetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoGetListStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_photo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPhotoDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contents_v1_news_photo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contents_v1_news_photo_proto_goTypes,
		DependencyIndexes: file_contents_v1_news_photo_proto_depIdxs,
		EnumInfos:         file_contents_v1_news_photo_proto_enumTypes,
		MessageInfos:      file_contents_v1_news_photo_proto_msgTypes,
	}.Build()
	File_contents_v1_news_photo_proto = out.File
	file_contents_v1_news_photo_proto_rawDesc = nil
	file_contents_v1_news_photo_proto_goTypes = nil
	file_contents_v1_news_photo_proto_depIdxs = nil
}
