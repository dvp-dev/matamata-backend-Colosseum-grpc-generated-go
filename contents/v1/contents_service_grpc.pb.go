// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contents_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	TagGetOne(ctx context.Context, in *TagGetOneRequest, opts ...grpc.CallOption) (*TagGetOneResponse, error)
	TagGetMultiple(ctx context.Context, in *TagGetMultipleRequest, opts ...grpc.CallOption) (*TagGetMultipleResponse, error)
	TagCreate(ctx context.Context, in *TagCreateRequest, opts ...grpc.CallOption) (*TagCreateResponse, error)
	TagUpdate(ctx context.Context, in *TagUpdateRequest, opts ...grpc.CallOption) (*TagUpdateResponse, error)
	TagDelete(ctx context.Context, in *TagDeleteRequest, opts ...grpc.CallOption) (*TagDeleteResponse, error)
	ArticleGetOne(ctx context.Context, in *ArticleGetOneRequest, opts ...grpc.CallOption) (*ArticleGetOneResponse, error)
	ArticleGetList(ctx context.Context, in *ArticleGetListRequest, opts ...grpc.CallOption) (*ArticleGetListResponse, error)
	ArticleCreate(ctx context.Context, in *ArticleCreateRequest, opts ...grpc.CallOption) (*ArticleCreateResponse, error)
	ArticleUpdate(ctx context.Context, in *ArticleUpdateRequest, opts ...grpc.CallOption) (*ArticleUpdateResponse, error)
	ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) TagGetOne(ctx context.Context, in *TagGetOneRequest, opts ...grpc.CallOption) (*TagGetOneResponse, error) {
	out := new(TagGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagGetMultiple(ctx context.Context, in *TagGetMultipleRequest, opts ...grpc.CallOption) (*TagGetMultipleResponse, error) {
	out := new(TagGetMultipleResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagGetMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagCreate(ctx context.Context, in *TagCreateRequest, opts ...grpc.CallOption) (*TagCreateResponse, error) {
	out := new(TagCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagUpdate(ctx context.Context, in *TagUpdateRequest, opts ...grpc.CallOption) (*TagUpdateResponse, error) {
	out := new(TagUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagDelete(ctx context.Context, in *TagDeleteRequest, opts ...grpc.CallOption) (*TagDeleteResponse, error) {
	out := new(TagDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleGetOne(ctx context.Context, in *ArticleGetOneRequest, opts ...grpc.CallOption) (*ArticleGetOneResponse, error) {
	out := new(ArticleGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleGetList(ctx context.Context, in *ArticleGetListRequest, opts ...grpc.CallOption) (*ArticleGetListResponse, error) {
	out := new(ArticleGetListResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleCreate(ctx context.Context, in *ArticleCreateRequest, opts ...grpc.CallOption) (*ArticleCreateResponse, error) {
	out := new(ArticleCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleUpdate(ctx context.Context, in *ArticleUpdateRequest, opts ...grpc.CallOption) (*ArticleUpdateResponse, error) {
	out := new(ArticleUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error) {
	out := new(ArticleDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	TagGetOne(context.Context, *TagGetOneRequest) (*TagGetOneResponse, error)
	TagGetMultiple(context.Context, *TagGetMultipleRequest) (*TagGetMultipleResponse, error)
	TagCreate(context.Context, *TagCreateRequest) (*TagCreateResponse, error)
	TagUpdate(context.Context, *TagUpdateRequest) (*TagUpdateResponse, error)
	TagDelete(context.Context, *TagDeleteRequest) (*TagDeleteResponse, error)
	ArticleGetOne(context.Context, *ArticleGetOneRequest) (*ArticleGetOneResponse, error)
	ArticleGetList(context.Context, *ArticleGetListRequest) (*ArticleGetListResponse, error)
	ArticleCreate(context.Context, *ArticleCreateRequest) (*ArticleCreateResponse, error)
	ArticleUpdate(context.Context, *ArticleUpdateRequest) (*ArticleUpdateResponse, error)
	ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) TagGetOne(context.Context, *TagGetOneRequest) (*TagGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagGetOne not implemented")
}
func (UnimplementedContentServiceServer) TagGetMultiple(context.Context, *TagGetMultipleRequest) (*TagGetMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagGetMultiple not implemented")
}
func (UnimplementedContentServiceServer) TagCreate(context.Context, *TagCreateRequest) (*TagCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagCreate not implemented")
}
func (UnimplementedContentServiceServer) TagUpdate(context.Context, *TagUpdateRequest) (*TagUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagUpdate not implemented")
}
func (UnimplementedContentServiceServer) TagDelete(context.Context, *TagDeleteRequest) (*TagDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDelete not implemented")
}
func (UnimplementedContentServiceServer) ArticleGetOne(context.Context, *ArticleGetOneRequest) (*ArticleGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleGetOne not implemented")
}
func (UnimplementedContentServiceServer) ArticleGetList(context.Context, *ArticleGetListRequest) (*ArticleGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleGetList not implemented")
}
func (UnimplementedContentServiceServer) ArticleCreate(context.Context, *ArticleCreateRequest) (*ArticleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleCreate not implemented")
}
func (UnimplementedContentServiceServer) ArticleUpdate(context.Context, *ArticleUpdateRequest) (*ArticleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleUpdate not implemented")
}
func (UnimplementedContentServiceServer) ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDelete not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_TagGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagGetOne(ctx, req.(*TagGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagGetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagGetMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagGetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagGetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagGetMultiple(ctx, req.(*TagGetMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagCreate(ctx, req.(*TagCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagUpdate(ctx, req.(*TagUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagDelete(ctx, req.(*TagDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleGetOne(ctx, req.(*ArticleGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleGetList(ctx, req.(*ArticleGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleCreate(ctx, req.(*ArticleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleUpdate(ctx, req.(*ArticleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleDelete(ctx, req.(*ArticleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contents.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TagGetOne",
			Handler:    _ContentService_TagGetOne_Handler,
		},
		{
			MethodName: "TagGetMultiple",
			Handler:    _ContentService_TagGetMultiple_Handler,
		},
		{
			MethodName: "TagCreate",
			Handler:    _ContentService_TagCreate_Handler,
		},
		{
			MethodName: "TagUpdate",
			Handler:    _ContentService_TagUpdate_Handler,
		},
		{
			MethodName: "TagDelete",
			Handler:    _ContentService_TagDelete_Handler,
		},
		{
			MethodName: "ArticleGetOne",
			Handler:    _ContentService_ArticleGetOne_Handler,
		},
		{
			MethodName: "ArticleGetList",
			Handler:    _ContentService_ArticleGetList_Handler,
		},
		{
			MethodName: "ArticleCreate",
			Handler:    _ContentService_ArticleCreate_Handler,
		},
		{
			MethodName: "ArticleUpdate",
			Handler:    _ContentService_ArticleUpdate_Handler,
		},
		{
			MethodName: "ArticleDelete",
			Handler:    _ContentService_ArticleDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contents/v1/contents_service.proto",
}
