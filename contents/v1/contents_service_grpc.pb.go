// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contents_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	TagGetOne(ctx context.Context, in *TagGetOneRequest, opts ...grpc.CallOption) (*TagGetOneResponse, error)
	TagGetMultiple(ctx context.Context, in *TagGetMultipleRequest, opts ...grpc.CallOption) (*TagGetMultipleResponse, error)
	TagCreate(ctx context.Context, in *TagCreateRequest, opts ...grpc.CallOption) (*TagCreateResponse, error)
	TagUpdate(ctx context.Context, in *TagUpdateRequest, opts ...grpc.CallOption) (*TagUpdateResponse, error)
	TagDelete(ctx context.Context, in *TagDeleteRequest, opts ...grpc.CallOption) (*TagDeleteResponse, error)
	TagAnalytics(ctx context.Context, in *TagAnalyticsRequest, opts ...grpc.CallOption) (*TagAnalyticsResponse, error)
	Category1GetOne(ctx context.Context, in *Category1GetOneRequest, opts ...grpc.CallOption) (*Category1GetOneResponse, error)
	Category2GetOne(ctx context.Context, in *Category2GetOneRequest, opts ...grpc.CallOption) (*Category2GetOneResponse, error)
	Category3GetOne(ctx context.Context, in *Category3GetOneRequest, opts ...grpc.CallOption) (*Category3GetOneResponse, error)
	Category1GetMultiple(ctx context.Context, in *Category1GetMultipleRequest, opts ...grpc.CallOption) (*Category1GetMultipleResponse, error)
	Category2GetMultiple(ctx context.Context, in *Category2GetMultipleRequest, opts ...grpc.CallOption) (*Category2GetMultipleResponse, error)
	Category3GetMultiple(ctx context.Context, in *Category3GetMultipleRequest, opts ...grpc.CallOption) (*Category3GetMultipleResponse, error)
	Category1Create(ctx context.Context, in *Category1CreateRequest, opts ...grpc.CallOption) (*Category1CreateResponse, error)
	Category2Create(ctx context.Context, in *Category2CreateRequest, opts ...grpc.CallOption) (*Category2CreateResponse, error)
	Category3Create(ctx context.Context, in *Category3CreateRequest, opts ...grpc.CallOption) (*Category3CreateResponse, error)
	Category1Update(ctx context.Context, in *Category1UpdateRequest, opts ...grpc.CallOption) (*Category1UpdateResponse, error)
	Category2Update(ctx context.Context, in *Category2UpdateRequest, opts ...grpc.CallOption) (*Category2UpdateResponse, error)
	Category3Update(ctx context.Context, in *Category3UpdateRequest, opts ...grpc.CallOption) (*Category3UpdateResponse, error)
	Category1Delete(ctx context.Context, in *Category1DeleteRequest, opts ...grpc.CallOption) (*Category1DeleteResponse, error)
	Category2Delete(ctx context.Context, in *Category2DeleteRequest, opts ...grpc.CallOption) (*Category2DeleteResponse, error)
	Category3Delete(ctx context.Context, in *Category3DeleteRequest, opts ...grpc.CallOption) (*Category3DeleteResponse, error)
	ArticleGetOne(ctx context.Context, in *ArticleGetOneRequest, opts ...grpc.CallOption) (*ArticleGetOneResponse, error)
	ArticleGetList(ctx context.Context, in *ArticleGetListRequest, opts ...grpc.CallOption) (*ArticleGetListResponse, error)
	ArticleGetListStream(ctx context.Context, in *ArticleGetListRequest, opts ...grpc.CallOption) (ContentService_ArticleGetListStreamClient, error)
	ArticleCreate(ctx context.Context, in *ArticleCreateRequest, opts ...grpc.CallOption) (*ArticleCreateResponse, error)
	ArticleUpdate(ctx context.Context, in *ArticleUpdateRequest, opts ...grpc.CallOption) (*ArticleUpdateResponse, error)
	ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error)
	InfografikGetOne(ctx context.Context, in *InfografikGetOneRequest, opts ...grpc.CallOption) (*InfografikGetOneResponse, error)
	InfografikGetList(ctx context.Context, in *InfografikGetListRequest, opts ...grpc.CallOption) (*InfografikGetListResponse, error)
	InfografikGetListStream(ctx context.Context, in *InfografikGetListRequest, opts ...grpc.CallOption) (ContentService_InfografikGetListStreamClient, error)
	InfografikCreate(ctx context.Context, in *InfografikCreateRequest, opts ...grpc.CallOption) (*InfografikCreateResponse, error)
	InfografikUpdate(ctx context.Context, in *InfografikUpdateRequest, opts ...grpc.CallOption) (*InfografikUpdateResponse, error)
	InfografikDelete(ctx context.Context, in *InfografikDeleteRequest, opts ...grpc.CallOption) (*InfografikDeleteResponse, error)
	NewsPhotoGetOne(ctx context.Context, in *NewsPhotoGetOneRequest, opts ...grpc.CallOption) (*NewsPhotoGetOneResponse, error)
	NewsPhotoGetList(ctx context.Context, in *NewsPhotoGetListRequest, opts ...grpc.CallOption) (*NewsPhotoGetListResponse, error)
	NewsPhotoGetListStream(ctx context.Context, in *NewsPhotoGetListRequest, opts ...grpc.CallOption) (ContentService_NewsPhotoGetListStreamClient, error)
	NewsPhotoCreate(ctx context.Context, in *NewsPhotoCreateRequest, opts ...grpc.CallOption) (*NewsPhotoCreateResponse, error)
	NewsPhotoUpdate(ctx context.Context, in *NewsPhotoUpdateRequest, opts ...grpc.CallOption) (*NewsPhotoUpdateResponse, error)
	NewsPhotoDelete(ctx context.Context, in *NewsPhotoDeleteRequest, opts ...grpc.CallOption) (*NewsPhotoDeleteResponse, error)
	NewsVideoGetOne(ctx context.Context, in *NewsVideoGetOneRequest, opts ...grpc.CallOption) (*NewsVideoGetOneResponse, error)
	NewsVideoGetList(ctx context.Context, in *NewsVideoGetListRequest, opts ...grpc.CallOption) (*NewsVideoGetListResponse, error)
	NewsVideoGetListStream(ctx context.Context, in *NewsVideoGetListRequest, opts ...grpc.CallOption) (ContentService_NewsVideoGetListStreamClient, error)
	NewsVideoCreate(ctx context.Context, in *NewsVideoCreateRequest, opts ...grpc.CallOption) (*NewsVideoCreateResponse, error)
	NewsVideoUpdate(ctx context.Context, in *NewsVideoUpdateRequest, opts ...grpc.CallOption) (*NewsVideoUpdateResponse, error)
	NewsVideoDelete(ctx context.Context, in *NewsVideoDeleteRequest, opts ...grpc.CallOption) (*NewsVideoDeleteResponse, error)
	PollingGetOne(ctx context.Context, in *PollingGetOneRequest, opts ...grpc.CallOption) (*PollingGetOneResponse, error)
	PollingGetList(ctx context.Context, in *PollingGetListRequest, opts ...grpc.CallOption) (*PollingGetListResponse, error)
	PollingCreate(ctx context.Context, in *PollingCreateRequest, opts ...grpc.CallOption) (*PollingCreateResponse, error)
	PollingUpdate(ctx context.Context, in *PollingUpdateRequest, opts ...grpc.CallOption) (*PollingUpdateResponse, error)
	PollingDelete(ctx context.Context, in *PollingDeleteRequest, opts ...grpc.CallOption) (*PollingDeleteResponse, error)
	LogGetList(ctx context.Context, in *LogGetListInput, opts ...grpc.CallOption) (*LogGetListOutput, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) TagGetOne(ctx context.Context, in *TagGetOneRequest, opts ...grpc.CallOption) (*TagGetOneResponse, error) {
	out := new(TagGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagGetMultiple(ctx context.Context, in *TagGetMultipleRequest, opts ...grpc.CallOption) (*TagGetMultipleResponse, error) {
	out := new(TagGetMultipleResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagGetMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagCreate(ctx context.Context, in *TagCreateRequest, opts ...grpc.CallOption) (*TagCreateResponse, error) {
	out := new(TagCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagUpdate(ctx context.Context, in *TagUpdateRequest, opts ...grpc.CallOption) (*TagUpdateResponse, error) {
	out := new(TagUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagDelete(ctx context.Context, in *TagDeleteRequest, opts ...grpc.CallOption) (*TagDeleteResponse, error) {
	out := new(TagDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagAnalytics(ctx context.Context, in *TagAnalyticsRequest, opts ...grpc.CallOption) (*TagAnalyticsResponse, error) {
	out := new(TagAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/TagAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category1GetOne(ctx context.Context, in *Category1GetOneRequest, opts ...grpc.CallOption) (*Category1GetOneResponse, error) {
	out := new(Category1GetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category1GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category2GetOne(ctx context.Context, in *Category2GetOneRequest, opts ...grpc.CallOption) (*Category2GetOneResponse, error) {
	out := new(Category2GetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category2GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category3GetOne(ctx context.Context, in *Category3GetOneRequest, opts ...grpc.CallOption) (*Category3GetOneResponse, error) {
	out := new(Category3GetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category3GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category1GetMultiple(ctx context.Context, in *Category1GetMultipleRequest, opts ...grpc.CallOption) (*Category1GetMultipleResponse, error) {
	out := new(Category1GetMultipleResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category1GetMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category2GetMultiple(ctx context.Context, in *Category2GetMultipleRequest, opts ...grpc.CallOption) (*Category2GetMultipleResponse, error) {
	out := new(Category2GetMultipleResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category2GetMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category3GetMultiple(ctx context.Context, in *Category3GetMultipleRequest, opts ...grpc.CallOption) (*Category3GetMultipleResponse, error) {
	out := new(Category3GetMultipleResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category3GetMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category1Create(ctx context.Context, in *Category1CreateRequest, opts ...grpc.CallOption) (*Category1CreateResponse, error) {
	out := new(Category1CreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category1Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category2Create(ctx context.Context, in *Category2CreateRequest, opts ...grpc.CallOption) (*Category2CreateResponse, error) {
	out := new(Category2CreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category2Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category3Create(ctx context.Context, in *Category3CreateRequest, opts ...grpc.CallOption) (*Category3CreateResponse, error) {
	out := new(Category3CreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category3Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category1Update(ctx context.Context, in *Category1UpdateRequest, opts ...grpc.CallOption) (*Category1UpdateResponse, error) {
	out := new(Category1UpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category1Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category2Update(ctx context.Context, in *Category2UpdateRequest, opts ...grpc.CallOption) (*Category2UpdateResponse, error) {
	out := new(Category2UpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category2Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category3Update(ctx context.Context, in *Category3UpdateRequest, opts ...grpc.CallOption) (*Category3UpdateResponse, error) {
	out := new(Category3UpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category3Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category1Delete(ctx context.Context, in *Category1DeleteRequest, opts ...grpc.CallOption) (*Category1DeleteResponse, error) {
	out := new(Category1DeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category1Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category2Delete(ctx context.Context, in *Category2DeleteRequest, opts ...grpc.CallOption) (*Category2DeleteResponse, error) {
	out := new(Category2DeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category2Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Category3Delete(ctx context.Context, in *Category3DeleteRequest, opts ...grpc.CallOption) (*Category3DeleteResponse, error) {
	out := new(Category3DeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/Category3Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleGetOne(ctx context.Context, in *ArticleGetOneRequest, opts ...grpc.CallOption) (*ArticleGetOneResponse, error) {
	out := new(ArticleGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleGetList(ctx context.Context, in *ArticleGetListRequest, opts ...grpc.CallOption) (*ArticleGetListResponse, error) {
	out := new(ArticleGetListResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleGetListStream(ctx context.Context, in *ArticleGetListRequest, opts ...grpc.CallOption) (ContentService_ArticleGetListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[0], "/contents.v1.ContentService/ArticleGetListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceArticleGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_ArticleGetListStreamClient interface {
	Recv() (*ArticleGetListStreamResponse, error)
	grpc.ClientStream
}

type contentServiceArticleGetListStreamClient struct {
	grpc.ClientStream
}

func (x *contentServiceArticleGetListStreamClient) Recv() (*ArticleGetListStreamResponse, error) {
	m := new(ArticleGetListStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) ArticleCreate(ctx context.Context, in *ArticleCreateRequest, opts ...grpc.CallOption) (*ArticleCreateResponse, error) {
	out := new(ArticleCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleUpdate(ctx context.Context, in *ArticleUpdateRequest, opts ...grpc.CallOption) (*ArticleUpdateResponse, error) {
	out := new(ArticleUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error) {
	out := new(ArticleDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/ArticleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) InfografikGetOne(ctx context.Context, in *InfografikGetOneRequest, opts ...grpc.CallOption) (*InfografikGetOneResponse, error) {
	out := new(InfografikGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/InfografikGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) InfografikGetList(ctx context.Context, in *InfografikGetListRequest, opts ...grpc.CallOption) (*InfografikGetListResponse, error) {
	out := new(InfografikGetListResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/InfografikGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) InfografikGetListStream(ctx context.Context, in *InfografikGetListRequest, opts ...grpc.CallOption) (ContentService_InfografikGetListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[1], "/contents.v1.ContentService/InfografikGetListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceInfografikGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_InfografikGetListStreamClient interface {
	Recv() (*InfografikGetListStreamResponse, error)
	grpc.ClientStream
}

type contentServiceInfografikGetListStreamClient struct {
	grpc.ClientStream
}

func (x *contentServiceInfografikGetListStreamClient) Recv() (*InfografikGetListStreamResponse, error) {
	m := new(InfografikGetListStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) InfografikCreate(ctx context.Context, in *InfografikCreateRequest, opts ...grpc.CallOption) (*InfografikCreateResponse, error) {
	out := new(InfografikCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/InfografikCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) InfografikUpdate(ctx context.Context, in *InfografikUpdateRequest, opts ...grpc.CallOption) (*InfografikUpdateResponse, error) {
	out := new(InfografikUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/InfografikUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) InfografikDelete(ctx context.Context, in *InfografikDeleteRequest, opts ...grpc.CallOption) (*InfografikDeleteResponse, error) {
	out := new(InfografikDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/InfografikDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsPhotoGetOne(ctx context.Context, in *NewsPhotoGetOneRequest, opts ...grpc.CallOption) (*NewsPhotoGetOneResponse, error) {
	out := new(NewsPhotoGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsPhotoGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsPhotoGetList(ctx context.Context, in *NewsPhotoGetListRequest, opts ...grpc.CallOption) (*NewsPhotoGetListResponse, error) {
	out := new(NewsPhotoGetListResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsPhotoGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsPhotoGetListStream(ctx context.Context, in *NewsPhotoGetListRequest, opts ...grpc.CallOption) (ContentService_NewsPhotoGetListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[2], "/contents.v1.ContentService/NewsPhotoGetListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceNewsPhotoGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_NewsPhotoGetListStreamClient interface {
	Recv() (*NewsPhotoGetListStreamResponse, error)
	grpc.ClientStream
}

type contentServiceNewsPhotoGetListStreamClient struct {
	grpc.ClientStream
}

func (x *contentServiceNewsPhotoGetListStreamClient) Recv() (*NewsPhotoGetListStreamResponse, error) {
	m := new(NewsPhotoGetListStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) NewsPhotoCreate(ctx context.Context, in *NewsPhotoCreateRequest, opts ...grpc.CallOption) (*NewsPhotoCreateResponse, error) {
	out := new(NewsPhotoCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsPhotoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsPhotoUpdate(ctx context.Context, in *NewsPhotoUpdateRequest, opts ...grpc.CallOption) (*NewsPhotoUpdateResponse, error) {
	out := new(NewsPhotoUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsPhotoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsPhotoDelete(ctx context.Context, in *NewsPhotoDeleteRequest, opts ...grpc.CallOption) (*NewsPhotoDeleteResponse, error) {
	out := new(NewsPhotoDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsPhotoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsVideoGetOne(ctx context.Context, in *NewsVideoGetOneRequest, opts ...grpc.CallOption) (*NewsVideoGetOneResponse, error) {
	out := new(NewsVideoGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsVideoGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsVideoGetList(ctx context.Context, in *NewsVideoGetListRequest, opts ...grpc.CallOption) (*NewsVideoGetListResponse, error) {
	out := new(NewsVideoGetListResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsVideoGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsVideoGetListStream(ctx context.Context, in *NewsVideoGetListRequest, opts ...grpc.CallOption) (ContentService_NewsVideoGetListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[3], "/contents.v1.ContentService/NewsVideoGetListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceNewsVideoGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_NewsVideoGetListStreamClient interface {
	Recv() (*NewsVideoGetListStreamResponse, error)
	grpc.ClientStream
}

type contentServiceNewsVideoGetListStreamClient struct {
	grpc.ClientStream
}

func (x *contentServiceNewsVideoGetListStreamClient) Recv() (*NewsVideoGetListStreamResponse, error) {
	m := new(NewsVideoGetListStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) NewsVideoCreate(ctx context.Context, in *NewsVideoCreateRequest, opts ...grpc.CallOption) (*NewsVideoCreateResponse, error) {
	out := new(NewsVideoCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsVideoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsVideoUpdate(ctx context.Context, in *NewsVideoUpdateRequest, opts ...grpc.CallOption) (*NewsVideoUpdateResponse, error) {
	out := new(NewsVideoUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsVideoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) NewsVideoDelete(ctx context.Context, in *NewsVideoDeleteRequest, opts ...grpc.CallOption) (*NewsVideoDeleteResponse, error) {
	out := new(NewsVideoDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/NewsVideoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PollingGetOne(ctx context.Context, in *PollingGetOneRequest, opts ...grpc.CallOption) (*PollingGetOneResponse, error) {
	out := new(PollingGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/PollingGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PollingGetList(ctx context.Context, in *PollingGetListRequest, opts ...grpc.CallOption) (*PollingGetListResponse, error) {
	out := new(PollingGetListResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/PollingGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PollingCreate(ctx context.Context, in *PollingCreateRequest, opts ...grpc.CallOption) (*PollingCreateResponse, error) {
	out := new(PollingCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/PollingCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PollingUpdate(ctx context.Context, in *PollingUpdateRequest, opts ...grpc.CallOption) (*PollingUpdateResponse, error) {
	out := new(PollingUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/PollingUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PollingDelete(ctx context.Context, in *PollingDeleteRequest, opts ...grpc.CallOption) (*PollingDeleteResponse, error) {
	out := new(PollingDeleteResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/PollingDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) LogGetList(ctx context.Context, in *LogGetListInput, opts ...grpc.CallOption) (*LogGetListOutput, error) {
	out := new(LogGetListOutput)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/LogGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	TagGetOne(context.Context, *TagGetOneRequest) (*TagGetOneResponse, error)
	TagGetMultiple(context.Context, *TagGetMultipleRequest) (*TagGetMultipleResponse, error)
	TagCreate(context.Context, *TagCreateRequest) (*TagCreateResponse, error)
	TagUpdate(context.Context, *TagUpdateRequest) (*TagUpdateResponse, error)
	TagDelete(context.Context, *TagDeleteRequest) (*TagDeleteResponse, error)
	TagAnalytics(context.Context, *TagAnalyticsRequest) (*TagAnalyticsResponse, error)
	Category1GetOne(context.Context, *Category1GetOneRequest) (*Category1GetOneResponse, error)
	Category2GetOne(context.Context, *Category2GetOneRequest) (*Category2GetOneResponse, error)
	Category3GetOne(context.Context, *Category3GetOneRequest) (*Category3GetOneResponse, error)
	Category1GetMultiple(context.Context, *Category1GetMultipleRequest) (*Category1GetMultipleResponse, error)
	Category2GetMultiple(context.Context, *Category2GetMultipleRequest) (*Category2GetMultipleResponse, error)
	Category3GetMultiple(context.Context, *Category3GetMultipleRequest) (*Category3GetMultipleResponse, error)
	Category1Create(context.Context, *Category1CreateRequest) (*Category1CreateResponse, error)
	Category2Create(context.Context, *Category2CreateRequest) (*Category2CreateResponse, error)
	Category3Create(context.Context, *Category3CreateRequest) (*Category3CreateResponse, error)
	Category1Update(context.Context, *Category1UpdateRequest) (*Category1UpdateResponse, error)
	Category2Update(context.Context, *Category2UpdateRequest) (*Category2UpdateResponse, error)
	Category3Update(context.Context, *Category3UpdateRequest) (*Category3UpdateResponse, error)
	Category1Delete(context.Context, *Category1DeleteRequest) (*Category1DeleteResponse, error)
	Category2Delete(context.Context, *Category2DeleteRequest) (*Category2DeleteResponse, error)
	Category3Delete(context.Context, *Category3DeleteRequest) (*Category3DeleteResponse, error)
	ArticleGetOne(context.Context, *ArticleGetOneRequest) (*ArticleGetOneResponse, error)
	ArticleGetList(context.Context, *ArticleGetListRequest) (*ArticleGetListResponse, error)
	ArticleGetListStream(*ArticleGetListRequest, ContentService_ArticleGetListStreamServer) error
	ArticleCreate(context.Context, *ArticleCreateRequest) (*ArticleCreateResponse, error)
	ArticleUpdate(context.Context, *ArticleUpdateRequest) (*ArticleUpdateResponse, error)
	ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error)
	InfografikGetOne(context.Context, *InfografikGetOneRequest) (*InfografikGetOneResponse, error)
	InfografikGetList(context.Context, *InfografikGetListRequest) (*InfografikGetListResponse, error)
	InfografikGetListStream(*InfografikGetListRequest, ContentService_InfografikGetListStreamServer) error
	InfografikCreate(context.Context, *InfografikCreateRequest) (*InfografikCreateResponse, error)
	InfografikUpdate(context.Context, *InfografikUpdateRequest) (*InfografikUpdateResponse, error)
	InfografikDelete(context.Context, *InfografikDeleteRequest) (*InfografikDeleteResponse, error)
	NewsPhotoGetOne(context.Context, *NewsPhotoGetOneRequest) (*NewsPhotoGetOneResponse, error)
	NewsPhotoGetList(context.Context, *NewsPhotoGetListRequest) (*NewsPhotoGetListResponse, error)
	NewsPhotoGetListStream(*NewsPhotoGetListRequest, ContentService_NewsPhotoGetListStreamServer) error
	NewsPhotoCreate(context.Context, *NewsPhotoCreateRequest) (*NewsPhotoCreateResponse, error)
	NewsPhotoUpdate(context.Context, *NewsPhotoUpdateRequest) (*NewsPhotoUpdateResponse, error)
	NewsPhotoDelete(context.Context, *NewsPhotoDeleteRequest) (*NewsPhotoDeleteResponse, error)
	NewsVideoGetOne(context.Context, *NewsVideoGetOneRequest) (*NewsVideoGetOneResponse, error)
	NewsVideoGetList(context.Context, *NewsVideoGetListRequest) (*NewsVideoGetListResponse, error)
	NewsVideoGetListStream(*NewsVideoGetListRequest, ContentService_NewsVideoGetListStreamServer) error
	NewsVideoCreate(context.Context, *NewsVideoCreateRequest) (*NewsVideoCreateResponse, error)
	NewsVideoUpdate(context.Context, *NewsVideoUpdateRequest) (*NewsVideoUpdateResponse, error)
	NewsVideoDelete(context.Context, *NewsVideoDeleteRequest) (*NewsVideoDeleteResponse, error)
	PollingGetOne(context.Context, *PollingGetOneRequest) (*PollingGetOneResponse, error)
	PollingGetList(context.Context, *PollingGetListRequest) (*PollingGetListResponse, error)
	PollingCreate(context.Context, *PollingCreateRequest) (*PollingCreateResponse, error)
	PollingUpdate(context.Context, *PollingUpdateRequest) (*PollingUpdateResponse, error)
	PollingDelete(context.Context, *PollingDeleteRequest) (*PollingDeleteResponse, error)
	LogGetList(context.Context, *LogGetListInput) (*LogGetListOutput, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) TagGetOne(context.Context, *TagGetOneRequest) (*TagGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagGetOne not implemented")
}
func (UnimplementedContentServiceServer) TagGetMultiple(context.Context, *TagGetMultipleRequest) (*TagGetMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagGetMultiple not implemented")
}
func (UnimplementedContentServiceServer) TagCreate(context.Context, *TagCreateRequest) (*TagCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagCreate not implemented")
}
func (UnimplementedContentServiceServer) TagUpdate(context.Context, *TagUpdateRequest) (*TagUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagUpdate not implemented")
}
func (UnimplementedContentServiceServer) TagDelete(context.Context, *TagDeleteRequest) (*TagDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDelete not implemented")
}
func (UnimplementedContentServiceServer) TagAnalytics(context.Context, *TagAnalyticsRequest) (*TagAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagAnalytics not implemented")
}
func (UnimplementedContentServiceServer) Category1GetOne(context.Context, *Category1GetOneRequest) (*Category1GetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category1GetOne not implemented")
}
func (UnimplementedContentServiceServer) Category2GetOne(context.Context, *Category2GetOneRequest) (*Category2GetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category2GetOne not implemented")
}
func (UnimplementedContentServiceServer) Category3GetOne(context.Context, *Category3GetOneRequest) (*Category3GetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category3GetOne not implemented")
}
func (UnimplementedContentServiceServer) Category1GetMultiple(context.Context, *Category1GetMultipleRequest) (*Category1GetMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category1GetMultiple not implemented")
}
func (UnimplementedContentServiceServer) Category2GetMultiple(context.Context, *Category2GetMultipleRequest) (*Category2GetMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category2GetMultiple not implemented")
}
func (UnimplementedContentServiceServer) Category3GetMultiple(context.Context, *Category3GetMultipleRequest) (*Category3GetMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category3GetMultiple not implemented")
}
func (UnimplementedContentServiceServer) Category1Create(context.Context, *Category1CreateRequest) (*Category1CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category1Create not implemented")
}
func (UnimplementedContentServiceServer) Category2Create(context.Context, *Category2CreateRequest) (*Category2CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category2Create not implemented")
}
func (UnimplementedContentServiceServer) Category3Create(context.Context, *Category3CreateRequest) (*Category3CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category3Create not implemented")
}
func (UnimplementedContentServiceServer) Category1Update(context.Context, *Category1UpdateRequest) (*Category1UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category1Update not implemented")
}
func (UnimplementedContentServiceServer) Category2Update(context.Context, *Category2UpdateRequest) (*Category2UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category2Update not implemented")
}
func (UnimplementedContentServiceServer) Category3Update(context.Context, *Category3UpdateRequest) (*Category3UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category3Update not implemented")
}
func (UnimplementedContentServiceServer) Category1Delete(context.Context, *Category1DeleteRequest) (*Category1DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category1Delete not implemented")
}
func (UnimplementedContentServiceServer) Category2Delete(context.Context, *Category2DeleteRequest) (*Category2DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category2Delete not implemented")
}
func (UnimplementedContentServiceServer) Category3Delete(context.Context, *Category3DeleteRequest) (*Category3DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category3Delete not implemented")
}
func (UnimplementedContentServiceServer) ArticleGetOne(context.Context, *ArticleGetOneRequest) (*ArticleGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleGetOne not implemented")
}
func (UnimplementedContentServiceServer) ArticleGetList(context.Context, *ArticleGetListRequest) (*ArticleGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleGetList not implemented")
}
func (UnimplementedContentServiceServer) ArticleGetListStream(*ArticleGetListRequest, ContentService_ArticleGetListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ArticleGetListStream not implemented")
}
func (UnimplementedContentServiceServer) ArticleCreate(context.Context, *ArticleCreateRequest) (*ArticleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleCreate not implemented")
}
func (UnimplementedContentServiceServer) ArticleUpdate(context.Context, *ArticleUpdateRequest) (*ArticleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleUpdate not implemented")
}
func (UnimplementedContentServiceServer) ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDelete not implemented")
}
func (UnimplementedContentServiceServer) InfografikGetOne(context.Context, *InfografikGetOneRequest) (*InfografikGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfografikGetOne not implemented")
}
func (UnimplementedContentServiceServer) InfografikGetList(context.Context, *InfografikGetListRequest) (*InfografikGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfografikGetList not implemented")
}
func (UnimplementedContentServiceServer) InfografikGetListStream(*InfografikGetListRequest, ContentService_InfografikGetListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InfografikGetListStream not implemented")
}
func (UnimplementedContentServiceServer) InfografikCreate(context.Context, *InfografikCreateRequest) (*InfografikCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfografikCreate not implemented")
}
func (UnimplementedContentServiceServer) InfografikUpdate(context.Context, *InfografikUpdateRequest) (*InfografikUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfografikUpdate not implemented")
}
func (UnimplementedContentServiceServer) InfografikDelete(context.Context, *InfografikDeleteRequest) (*InfografikDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfografikDelete not implemented")
}
func (UnimplementedContentServiceServer) NewsPhotoGetOne(context.Context, *NewsPhotoGetOneRequest) (*NewsPhotoGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsPhotoGetOne not implemented")
}
func (UnimplementedContentServiceServer) NewsPhotoGetList(context.Context, *NewsPhotoGetListRequest) (*NewsPhotoGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsPhotoGetList not implemented")
}
func (UnimplementedContentServiceServer) NewsPhotoGetListStream(*NewsPhotoGetListRequest, ContentService_NewsPhotoGetListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NewsPhotoGetListStream not implemented")
}
func (UnimplementedContentServiceServer) NewsPhotoCreate(context.Context, *NewsPhotoCreateRequest) (*NewsPhotoCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsPhotoCreate not implemented")
}
func (UnimplementedContentServiceServer) NewsPhotoUpdate(context.Context, *NewsPhotoUpdateRequest) (*NewsPhotoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsPhotoUpdate not implemented")
}
func (UnimplementedContentServiceServer) NewsPhotoDelete(context.Context, *NewsPhotoDeleteRequest) (*NewsPhotoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsPhotoDelete not implemented")
}
func (UnimplementedContentServiceServer) NewsVideoGetOne(context.Context, *NewsVideoGetOneRequest) (*NewsVideoGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsVideoGetOne not implemented")
}
func (UnimplementedContentServiceServer) NewsVideoGetList(context.Context, *NewsVideoGetListRequest) (*NewsVideoGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsVideoGetList not implemented")
}
func (UnimplementedContentServiceServer) NewsVideoGetListStream(*NewsVideoGetListRequest, ContentService_NewsVideoGetListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NewsVideoGetListStream not implemented")
}
func (UnimplementedContentServiceServer) NewsVideoCreate(context.Context, *NewsVideoCreateRequest) (*NewsVideoCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsVideoCreate not implemented")
}
func (UnimplementedContentServiceServer) NewsVideoUpdate(context.Context, *NewsVideoUpdateRequest) (*NewsVideoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsVideoUpdate not implemented")
}
func (UnimplementedContentServiceServer) NewsVideoDelete(context.Context, *NewsVideoDeleteRequest) (*NewsVideoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsVideoDelete not implemented")
}
func (UnimplementedContentServiceServer) PollingGetOne(context.Context, *PollingGetOneRequest) (*PollingGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollingGetOne not implemented")
}
func (UnimplementedContentServiceServer) PollingGetList(context.Context, *PollingGetListRequest) (*PollingGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollingGetList not implemented")
}
func (UnimplementedContentServiceServer) PollingCreate(context.Context, *PollingCreateRequest) (*PollingCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollingCreate not implemented")
}
func (UnimplementedContentServiceServer) PollingUpdate(context.Context, *PollingUpdateRequest) (*PollingUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollingUpdate not implemented")
}
func (UnimplementedContentServiceServer) PollingDelete(context.Context, *PollingDeleteRequest) (*PollingDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollingDelete not implemented")
}
func (UnimplementedContentServiceServer) LogGetList(context.Context, *LogGetListInput) (*LogGetListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogGetList not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_TagGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagGetOne(ctx, req.(*TagGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagGetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagGetMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagGetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagGetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagGetMultiple(ctx, req.(*TagGetMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagCreate(ctx, req.(*TagCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagUpdate(ctx, req.(*TagUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagDelete(ctx, req.(*TagDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/TagAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagAnalytics(ctx, req.(*TagAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category1GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category1GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category1GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category1GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category1GetOne(ctx, req.(*Category1GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category2GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category2GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category2GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category2GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category2GetOne(ctx, req.(*Category2GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category3GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category3GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category3GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category3GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category3GetOne(ctx, req.(*Category3GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category1GetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category1GetMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category1GetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category1GetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category1GetMultiple(ctx, req.(*Category1GetMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category2GetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category2GetMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category2GetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category2GetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category2GetMultiple(ctx, req.(*Category2GetMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category3GetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category3GetMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category3GetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category3GetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category3GetMultiple(ctx, req.(*Category3GetMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category1Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category1CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category1Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category1Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category1Create(ctx, req.(*Category1CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category2Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category2CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category2Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category2Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category2Create(ctx, req.(*Category2CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category3Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category3CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category3Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category3Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category3Create(ctx, req.(*Category3CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category1Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category1UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category1Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category1Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category1Update(ctx, req.(*Category1UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category2Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category2UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category2Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category2Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category2Update(ctx, req.(*Category2UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category3Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category3UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category3Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category3Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category3Update(ctx, req.(*Category3UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category1Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category1DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category1Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category1Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category1Delete(ctx, req.(*Category1DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category2Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category2DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category2Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category2Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category2Delete(ctx, req.(*Category2DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Category3Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category3DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Category3Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/Category3Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Category3Delete(ctx, req.(*Category3DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleGetOne(ctx, req.(*ArticleGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleGetList(ctx, req.(*ArticleGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleGetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArticleGetListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).ArticleGetListStream(m, &contentServiceArticleGetListStreamServer{stream})
}

type ContentService_ArticleGetListStreamServer interface {
	Send(*ArticleGetListStreamResponse) error
	grpc.ServerStream
}

type contentServiceArticleGetListStreamServer struct {
	grpc.ServerStream
}

func (x *contentServiceArticleGetListStreamServer) Send(m *ArticleGetListStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_ArticleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleCreate(ctx, req.(*ArticleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleUpdate(ctx, req.(*ArticleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/ArticleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticleDelete(ctx, req.(*ArticleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_InfografikGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfografikGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).InfografikGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/InfografikGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).InfografikGetOne(ctx, req.(*InfografikGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_InfografikGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfografikGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).InfografikGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/InfografikGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).InfografikGetList(ctx, req.(*InfografikGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_InfografikGetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfografikGetListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).InfografikGetListStream(m, &contentServiceInfografikGetListStreamServer{stream})
}

type ContentService_InfografikGetListStreamServer interface {
	Send(*InfografikGetListStreamResponse) error
	grpc.ServerStream
}

type contentServiceInfografikGetListStreamServer struct {
	grpc.ServerStream
}

func (x *contentServiceInfografikGetListStreamServer) Send(m *InfografikGetListStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_InfografikCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfografikCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).InfografikCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/InfografikCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).InfografikCreate(ctx, req.(*InfografikCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_InfografikUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfografikUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).InfografikUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/InfografikUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).InfografikUpdate(ctx, req.(*InfografikUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_InfografikDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfografikDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).InfografikDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/InfografikDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).InfografikDelete(ctx, req.(*InfografikDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsPhotoGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsPhotoGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsPhotoGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsPhotoGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsPhotoGetOne(ctx, req.(*NewsPhotoGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsPhotoGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsPhotoGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsPhotoGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsPhotoGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsPhotoGetList(ctx, req.(*NewsPhotoGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsPhotoGetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewsPhotoGetListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).NewsPhotoGetListStream(m, &contentServiceNewsPhotoGetListStreamServer{stream})
}

type ContentService_NewsPhotoGetListStreamServer interface {
	Send(*NewsPhotoGetListStreamResponse) error
	grpc.ServerStream
}

type contentServiceNewsPhotoGetListStreamServer struct {
	grpc.ServerStream
}

func (x *contentServiceNewsPhotoGetListStreamServer) Send(m *NewsPhotoGetListStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_NewsPhotoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsPhotoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsPhotoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsPhotoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsPhotoCreate(ctx, req.(*NewsPhotoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsPhotoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsPhotoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsPhotoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsPhotoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsPhotoUpdate(ctx, req.(*NewsPhotoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsPhotoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsPhotoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsPhotoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsPhotoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsPhotoDelete(ctx, req.(*NewsPhotoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsVideoGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsVideoGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsVideoGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsVideoGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsVideoGetOne(ctx, req.(*NewsVideoGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsVideoGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsVideoGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsVideoGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsVideoGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsVideoGetList(ctx, req.(*NewsVideoGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsVideoGetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewsVideoGetListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).NewsVideoGetListStream(m, &contentServiceNewsVideoGetListStreamServer{stream})
}

type ContentService_NewsVideoGetListStreamServer interface {
	Send(*NewsVideoGetListStreamResponse) error
	grpc.ServerStream
}

type contentServiceNewsVideoGetListStreamServer struct {
	grpc.ServerStream
}

func (x *contentServiceNewsVideoGetListStreamServer) Send(m *NewsVideoGetListStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_NewsVideoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsVideoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsVideoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsVideoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsVideoCreate(ctx, req.(*NewsVideoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsVideoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsVideoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsVideoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsVideoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsVideoUpdate(ctx, req.(*NewsVideoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_NewsVideoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsVideoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).NewsVideoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/NewsVideoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).NewsVideoDelete(ctx, req.(*NewsVideoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PollingGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PollingGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/PollingGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PollingGetOne(ctx, req.(*PollingGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PollingGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PollingGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/PollingGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PollingGetList(ctx, req.(*PollingGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PollingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PollingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/PollingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PollingCreate(ctx, req.(*PollingCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PollingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PollingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/PollingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PollingUpdate(ctx, req.(*PollingUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PollingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollingDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PollingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/PollingDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PollingDelete(ctx, req.(*PollingDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_LogGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogGetListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).LogGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/LogGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).LogGetList(ctx, req.(*LogGetListInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contents.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TagGetOne",
			Handler:    _ContentService_TagGetOne_Handler,
		},
		{
			MethodName: "TagGetMultiple",
			Handler:    _ContentService_TagGetMultiple_Handler,
		},
		{
			MethodName: "TagCreate",
			Handler:    _ContentService_TagCreate_Handler,
		},
		{
			MethodName: "TagUpdate",
			Handler:    _ContentService_TagUpdate_Handler,
		},
		{
			MethodName: "TagDelete",
			Handler:    _ContentService_TagDelete_Handler,
		},
		{
			MethodName: "TagAnalytics",
			Handler:    _ContentService_TagAnalytics_Handler,
		},
		{
			MethodName: "Category1GetOne",
			Handler:    _ContentService_Category1GetOne_Handler,
		},
		{
			MethodName: "Category2GetOne",
			Handler:    _ContentService_Category2GetOne_Handler,
		},
		{
			MethodName: "Category3GetOne",
			Handler:    _ContentService_Category3GetOne_Handler,
		},
		{
			MethodName: "Category1GetMultiple",
			Handler:    _ContentService_Category1GetMultiple_Handler,
		},
		{
			MethodName: "Category2GetMultiple",
			Handler:    _ContentService_Category2GetMultiple_Handler,
		},
		{
			MethodName: "Category3GetMultiple",
			Handler:    _ContentService_Category3GetMultiple_Handler,
		},
		{
			MethodName: "Category1Create",
			Handler:    _ContentService_Category1Create_Handler,
		},
		{
			MethodName: "Category2Create",
			Handler:    _ContentService_Category2Create_Handler,
		},
		{
			MethodName: "Category3Create",
			Handler:    _ContentService_Category3Create_Handler,
		},
		{
			MethodName: "Category1Update",
			Handler:    _ContentService_Category1Update_Handler,
		},
		{
			MethodName: "Category2Update",
			Handler:    _ContentService_Category2Update_Handler,
		},
		{
			MethodName: "Category3Update",
			Handler:    _ContentService_Category3Update_Handler,
		},
		{
			MethodName: "Category1Delete",
			Handler:    _ContentService_Category1Delete_Handler,
		},
		{
			MethodName: "Category2Delete",
			Handler:    _ContentService_Category2Delete_Handler,
		},
		{
			MethodName: "Category3Delete",
			Handler:    _ContentService_Category3Delete_Handler,
		},
		{
			MethodName: "ArticleGetOne",
			Handler:    _ContentService_ArticleGetOne_Handler,
		},
		{
			MethodName: "ArticleGetList",
			Handler:    _ContentService_ArticleGetList_Handler,
		},
		{
			MethodName: "ArticleCreate",
			Handler:    _ContentService_ArticleCreate_Handler,
		},
		{
			MethodName: "ArticleUpdate",
			Handler:    _ContentService_ArticleUpdate_Handler,
		},
		{
			MethodName: "ArticleDelete",
			Handler:    _ContentService_ArticleDelete_Handler,
		},
		{
			MethodName: "InfografikGetOne",
			Handler:    _ContentService_InfografikGetOne_Handler,
		},
		{
			MethodName: "InfografikGetList",
			Handler:    _ContentService_InfografikGetList_Handler,
		},
		{
			MethodName: "InfografikCreate",
			Handler:    _ContentService_InfografikCreate_Handler,
		},
		{
			MethodName: "InfografikUpdate",
			Handler:    _ContentService_InfografikUpdate_Handler,
		},
		{
			MethodName: "InfografikDelete",
			Handler:    _ContentService_InfografikDelete_Handler,
		},
		{
			MethodName: "NewsPhotoGetOne",
			Handler:    _ContentService_NewsPhotoGetOne_Handler,
		},
		{
			MethodName: "NewsPhotoGetList",
			Handler:    _ContentService_NewsPhotoGetList_Handler,
		},
		{
			MethodName: "NewsPhotoCreate",
			Handler:    _ContentService_NewsPhotoCreate_Handler,
		},
		{
			MethodName: "NewsPhotoUpdate",
			Handler:    _ContentService_NewsPhotoUpdate_Handler,
		},
		{
			MethodName: "NewsPhotoDelete",
			Handler:    _ContentService_NewsPhotoDelete_Handler,
		},
		{
			MethodName: "NewsVideoGetOne",
			Handler:    _ContentService_NewsVideoGetOne_Handler,
		},
		{
			MethodName: "NewsVideoGetList",
			Handler:    _ContentService_NewsVideoGetList_Handler,
		},
		{
			MethodName: "NewsVideoCreate",
			Handler:    _ContentService_NewsVideoCreate_Handler,
		},
		{
			MethodName: "NewsVideoUpdate",
			Handler:    _ContentService_NewsVideoUpdate_Handler,
		},
		{
			MethodName: "NewsVideoDelete",
			Handler:    _ContentService_NewsVideoDelete_Handler,
		},
		{
			MethodName: "PollingGetOne",
			Handler:    _ContentService_PollingGetOne_Handler,
		},
		{
			MethodName: "PollingGetList",
			Handler:    _ContentService_PollingGetList_Handler,
		},
		{
			MethodName: "PollingCreate",
			Handler:    _ContentService_PollingCreate_Handler,
		},
		{
			MethodName: "PollingUpdate",
			Handler:    _ContentService_PollingUpdate_Handler,
		},
		{
			MethodName: "PollingDelete",
			Handler:    _ContentService_PollingDelete_Handler,
		},
		{
			MethodName: "LogGetList",
			Handler:    _ContentService_LogGetList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArticleGetListStream",
			Handler:       _ContentService_ArticleGetListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfografikGetListStream",
			Handler:       _ContentService_InfografikGetListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewsPhotoGetListStream",
			Handler:       _ContentService_NewsPhotoGetListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewsVideoGetListStream",
			Handler:       _ContentService_NewsVideoGetListStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contents/v1/contents_service.proto",
}
