// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.2
// source: contents/v1/infografik.proto

package contents_grpc

import (
	_ "github.com/dvp-dev/matamata-grpc-generated-go/admin/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InfografikGetListRequest_Sort int32

const (
	InfografikGetListRequest_TITLE_ASCENDING_UNSPECIFIED InfografikGetListRequest_Sort = 0
	InfografikGetListRequest_TITLE_DESCENDING            InfografikGetListRequest_Sort = 1
	InfografikGetListRequest_OLDEST                      InfografikGetListRequest_Sort = 2
	InfografikGetListRequest_NEWEST                      InfografikGetListRequest_Sort = 3
)

// Enum value maps for InfografikGetListRequest_Sort.
var (
	InfografikGetListRequest_Sort_name = map[int32]string{
		0: "TITLE_ASCENDING_UNSPECIFIED",
		1: "TITLE_DESCENDING",
		2: "OLDEST",
		3: "NEWEST",
	}
	InfografikGetListRequest_Sort_value = map[string]int32{
		"TITLE_ASCENDING_UNSPECIFIED": 0,
		"TITLE_DESCENDING":            1,
		"OLDEST":                      2,
		"NEWEST":                      3,
	}
)

func (x InfografikGetListRequest_Sort) Enum() *InfografikGetListRequest_Sort {
	p := new(InfografikGetListRequest_Sort)
	*p = x
	return p
}

func (x InfografikGetListRequest_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfografikGetListRequest_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_contents_v1_infografik_proto_enumTypes[0].Descriptor()
}

func (InfografikGetListRequest_Sort) Type() protoreflect.EnumType {
	return &file_contents_v1_infografik_proto_enumTypes[0]
}

func (x InfografikGetListRequest_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfografikGetListRequest_Sort.Descriptor instead.
func (InfografikGetListRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{4, 0}
}

type Infografik struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId_1      int32                  `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2      int32                  `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3      int32                  `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Title             string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Lead              string                 `protobuf:"bytes,6,opt,name=lead,proto3" json:"lead,omitempty"`
	Content           string                 `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	ImageCoverUrl     string                 `protobuf:"bytes,8,opt,name=image_cover_url,json=imageCoverUrl,proto3" json:"image_cover_url,omitempty"`
	ImageCoverCaption string                 `protobuf:"bytes,9,opt,name=image_cover_caption,json=imageCoverCaption,proto3" json:"image_cover_caption,omitempty"`
	Slug              string                 `protobuf:"bytes,14,opt,name=slug,proto3" json:"slug,omitempty"`
	Status            ArticleStatus          `protobuf:"varint,10,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	SectionHomepage   ArticleSectionHomepage `protobuf:"varint,13,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Tags              []*Tag                 `protobuf:"bytes,51,rep,name=tags,proto3" json:"tags,omitempty"`
	Category1         *Category1             `protobuf:"bytes,52,opt,name=category1,proto3" json:"category1,omitempty"`
	Category2         *Category2             `protobuf:"bytes,53,opt,name=category2,proto3" json:"category2,omitempty"`
	Category3         *Category3             `protobuf:"bytes,54,opt,name=category3,proto3" json:"category3,omitempty"`
	Credits           []*ArticleCredit       `protobuf:"bytes,101,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *Infografik) Reset() {
	*x = Infografik{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infografik) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infografik) ProtoMessage() {}

func (x *Infografik) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infografik.ProtoReflect.Descriptor instead.
func (*Infografik) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{0}
}

func (x *Infografik) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Infografik) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *Infografik) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *Infografik) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *Infografik) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Infografik) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *Infografik) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Infografik) GetImageCoverUrl() string {
	if x != nil {
		return x.ImageCoverUrl
	}
	return ""
}

func (x *Infografik) GetImageCoverCaption() string {
	if x != nil {
		return x.ImageCoverCaption
	}
	return ""
}

func (x *Infografik) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Infografik) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *Infografik) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *Infografik) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Infografik) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Infografik) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Infografik) GetCategory1() *Category1 {
	if x != nil {
		return x.Category1
	}
	return nil
}

func (x *Infografik) GetCategory2() *Category2 {
	if x != nil {
		return x.Category2
	}
	return nil
}

func (x *Infografik) GetCategory3() *Category3 {
	if x != nil {
		return x.Category3
	}
	return nil
}

func (x *Infografik) GetCredits() []*ArticleCredit {
	if x != nil {
		return x.Credits
	}
	return nil
}

type InfografikCreateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId_1      int32                        `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2      int32                        `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3      int32                        `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Title             string                       `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Lead              string                       `protobuf:"bytes,6,opt,name=lead,proto3" json:"lead,omitempty"`
	Content           string                       `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	ImageCoverUrl     string                       `protobuf:"bytes,8,opt,name=image_cover_url,json=imageCoverUrl,proto3" json:"image_cover_url,omitempty"`
	ImageCoverCaption string                       `protobuf:"bytes,9,opt,name=image_cover_caption,json=imageCoverCaption,proto3" json:"image_cover_caption,omitempty"`
	Status            ArticleStatus                `protobuf:"varint,10,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	SectionHomepage   ArticleSectionHomepage       `protobuf:"varint,13,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	TagIds            []int32                      `protobuf:"varint,51,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	Credits           []*ArticleCreditCreateUpdate `protobuf:"bytes,52,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *InfografikCreateUpdate) Reset() {
	*x = InfografikCreateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikCreateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikCreateUpdate) ProtoMessage() {}

func (x *InfografikCreateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikCreateUpdate.ProtoReflect.Descriptor instead.
func (*InfografikCreateUpdate) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{1}
}

func (x *InfografikCreateUpdate) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *InfografikCreateUpdate) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *InfografikCreateUpdate) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *InfografikCreateUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InfografikCreateUpdate) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *InfografikCreateUpdate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *InfografikCreateUpdate) GetImageCoverUrl() string {
	if x != nil {
		return x.ImageCoverUrl
	}
	return ""
}

func (x *InfografikCreateUpdate) GetImageCoverCaption() string {
	if x != nil {
		return x.ImageCoverCaption
	}
	return ""
}

func (x *InfografikCreateUpdate) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *InfografikCreateUpdate) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *InfografikCreateUpdate) GetTagIds() []int32 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *InfografikCreateUpdate) GetCredits() []*ArticleCreditCreateUpdate {
	if x != nil {
		return x.Credits
	}
	return nil
}

type InfografikGetOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SearchBySlug string `protobuf:"bytes,2,opt,name=search_by_slug,json=searchBySlug,proto3" json:"search_by_slug,omitempty"`
}

func (x *InfografikGetOneRequest) Reset() {
	*x = InfografikGetOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikGetOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikGetOneRequest) ProtoMessage() {}

func (x *InfografikGetOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikGetOneRequest.ProtoReflect.Descriptor instead.
func (*InfografikGetOneRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{2}
}

func (x *InfografikGetOneRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InfografikGetOneRequest) GetSearchBySlug() string {
	if x != nil {
		return x.SearchBySlug
	}
	return ""
}

type InfografikGetOneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Infografik `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfografikGetOneResponse) Reset() {
	*x = InfografikGetOneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikGetOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikGetOneResponse) ProtoMessage() {}

func (x *InfografikGetOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikGetOneResponse.ProtoReflect.Descriptor instead.
func (*InfografikGetOneResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{3}
}

func (x *InfografikGetOneResponse) GetData() *Infografik {
	if x != nil {
		return x.Data
	}
	return nil
}

type InfografikGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          ArticleStatus                 `protobuf:"varint,1,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	StatusMultiple  []ArticleStatus               `protobuf:"varint,9,rep,packed,name=status_multiple,json=statusMultiple,proto3,enum=contents.v1.ArticleStatus" json:"status_multiple,omitempty"`
	SectionHomepage ArticleSectionHomepage        `protobuf:"varint,10,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	CategoryId_1    int32                         `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2    int32                         `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3    int32                         `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Search          string                        `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	Page            int32                         `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	ContentPerPage  int32                         `protobuf:"varint,8,opt,name=content_per_page,json=contentPerPage,proto3" json:"content_per_page,omitempty"`
	SortBy          InfografikGetListRequest_Sort `protobuf:"varint,5,opt,name=sort_by,json=sortBy,proto3,enum=contents.v1.InfografikGetListRequest_Sort" json:"sort_by,omitempty"`
}

func (x *InfografikGetListRequest) Reset() {
	*x = InfografikGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikGetListRequest) ProtoMessage() {}

func (x *InfografikGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikGetListRequest.ProtoReflect.Descriptor instead.
func (*InfografikGetListRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{4}
}

func (x *InfografikGetListRequest) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *InfografikGetListRequest) GetStatusMultiple() []ArticleStatus {
	if x != nil {
		return x.StatusMultiple
	}
	return nil
}

func (x *InfografikGetListRequest) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *InfografikGetListRequest) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *InfografikGetListRequest) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *InfografikGetListRequest) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *InfografikGetListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *InfografikGetListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *InfografikGetListRequest) GetContentPerPage() int32 {
	if x != nil {
		return x.ContentPerPage
	}
	return 0
}

func (x *InfografikGetListRequest) GetSortBy() InfografikGetListRequest_Sort {
	if x != nil {
		return x.SortBy
	}
	return InfografikGetListRequest_TITLE_ASCENDING_UNSPECIFIED
}

type InfografikGetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*Infografik `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	MaxPage int32         `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	Count   int32         `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *InfografikGetListResponse) Reset() {
	*x = InfografikGetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikGetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikGetListResponse) ProtoMessage() {}

func (x *InfografikGetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikGetListResponse.ProtoReflect.Descriptor instead.
func (*InfografikGetListResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{5}
}

func (x *InfografikGetListResponse) GetData() []*Infografik {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InfografikGetListResponse) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *InfografikGetListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InfografikGetListStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *Infografik `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxPage int32       `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	Count   int32       `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *InfografikGetListStreamResponse) Reset() {
	*x = InfografikGetListStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikGetListStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikGetListStreamResponse) ProtoMessage() {}

func (x *InfografikGetListStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikGetListStreamResponse.ProtoReflect.Descriptor instead.
func (*InfografikGetListStreamResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{6}
}

func (x *InfografikGetListStreamResponse) GetData() *Infografik {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InfografikGetListStreamResponse) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *InfografikGetListStreamResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InfografikCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *InfografikCreateUpdate `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfografikCreateRequest) Reset() {
	*x = InfografikCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikCreateRequest) ProtoMessage() {}

func (x *InfografikCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikCreateRequest.ProtoReflect.Descriptor instead.
func (*InfografikCreateRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{7}
}

func (x *InfografikCreateRequest) GetData() *InfografikCreateUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type InfografikCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Infografik `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfografikCreateResponse) Reset() {
	*x = InfografikCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikCreateResponse) ProtoMessage() {}

func (x *InfografikCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikCreateResponse.ProtoReflect.Descriptor instead.
func (*InfografikCreateResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{8}
}

func (x *InfografikCreateResponse) GetData() *Infografik {
	if x != nil {
		return x.Data
	}
	return nil
}

type InfografikUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *InfografikCreateUpdate `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfografikUpdateRequest) Reset() {
	*x = InfografikUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikUpdateRequest) ProtoMessage() {}

func (x *InfografikUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikUpdateRequest.ProtoReflect.Descriptor instead.
func (*InfografikUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{9}
}

func (x *InfografikUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InfografikUpdateRequest) GetData() *InfografikCreateUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type InfografikUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Infografik `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfografikUpdateResponse) Reset() {
	*x = InfografikUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikUpdateResponse) ProtoMessage() {}

func (x *InfografikUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikUpdateResponse.ProtoReflect.Descriptor instead.
func (*InfografikUpdateResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{10}
}

func (x *InfografikUpdateResponse) GetData() *Infografik {
	if x != nil {
		return x.Data
	}
	return nil
}

type InfografikDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SoftDelete bool  `protobuf:"varint,2,opt,name=soft_delete,json=softDelete,proto3" json:"soft_delete,omitempty"`
}

func (x *InfografikDeleteRequest) Reset() {
	*x = InfografikDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikDeleteRequest) ProtoMessage() {}

func (x *InfografikDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikDeleteRequest.ProtoReflect.Descriptor instead.
func (*InfografikDeleteRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{11}
}

func (x *InfografikDeleteRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InfografikDeleteRequest) GetSoftDelete() bool {
	if x != nil {
		return x.SoftDelete
	}
	return false
}

type InfografikDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Infografik `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfografikDeleteResponse) Reset() {
	*x = InfografikDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_infografik_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfografikDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfografikDeleteResponse) ProtoMessage() {}

func (x *InfografikDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_infografik_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfografikDeleteResponse.ProtoReflect.Descriptor instead.
func (*InfografikDeleteResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_infografik_proto_rawDescGZIP(), []int{12}
}

func (x *InfografikDeleteResponse) GetData() *Infografik {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_contents_v1_infografik_proto protoreflect.FileDescriptor

var file_contents_v1_infografik_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb0, 0x06, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x33, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x31, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x52, 0x09, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x33, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x33, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x22, 0xff, 0x03, 0x0a, 0x16, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66,
	0x69, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x34,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61,
	0x66, 0x69, 0x6b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72,
	0x61, 0x66, 0x69, 0x6b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc1, 0x04, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x33, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69,
	0x6b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x55, 0x0a, 0x04,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x53,
	0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x4c, 0x44, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x57, 0x45, 0x53,
	0x54, 0x10, 0x03, 0x22, 0x79, 0x0a, 0x19, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69,
	0x6b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7f,
	0x0a, 0x1f, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x52, 0x0a, 0x17, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x17,
	0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x47, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61,
	0x66, 0x69, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x17, 0x49, 0x6e, 0x66,
	0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x61,
	0x66, 0x69, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x49,
	0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x70,
	0x2d, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x61, 0x74, 0x61, 0x6d, 0x61, 0x74, 0x61, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_contents_v1_infografik_proto_rawDescOnce sync.Once
	file_contents_v1_infografik_proto_rawDescData = file_contents_v1_infografik_proto_rawDesc
)

func file_contents_v1_infografik_proto_rawDescGZIP() []byte {
	file_contents_v1_infografik_proto_rawDescOnce.Do(func() {
		file_contents_v1_infografik_proto_rawDescData = protoimpl.X.CompressGZIP(file_contents_v1_infografik_proto_rawDescData)
	})
	return file_contents_v1_infografik_proto_rawDescData
}

var file_contents_v1_infografik_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_contents_v1_infografik_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_contents_v1_infografik_proto_goTypes = []interface{}{
	(InfografikGetListRequest_Sort)(0),      // 0: contents.v1.InfografikGetListRequest.Sort
	(*Infografik)(nil),                      // 1: contents.v1.Infografik
	(*InfografikCreateUpdate)(nil),          // 2: contents.v1.InfografikCreateUpdate
	(*InfografikGetOneRequest)(nil),         // 3: contents.v1.InfografikGetOneRequest
	(*InfografikGetOneResponse)(nil),        // 4: contents.v1.InfografikGetOneResponse
	(*InfografikGetListRequest)(nil),        // 5: contents.v1.InfografikGetListRequest
	(*InfografikGetListResponse)(nil),       // 6: contents.v1.InfografikGetListResponse
	(*InfografikGetListStreamResponse)(nil), // 7: contents.v1.InfografikGetListStreamResponse
	(*InfografikCreateRequest)(nil),         // 8: contents.v1.InfografikCreateRequest
	(*InfografikCreateResponse)(nil),        // 9: contents.v1.InfografikCreateResponse
	(*InfografikUpdateRequest)(nil),         // 10: contents.v1.InfografikUpdateRequest
	(*InfografikUpdateResponse)(nil),        // 11: contents.v1.InfografikUpdateResponse
	(*InfografikDeleteRequest)(nil),         // 12: contents.v1.InfografikDeleteRequest
	(*InfografikDeleteResponse)(nil),        // 13: contents.v1.InfografikDeleteResponse
	(ArticleStatus)(0),                      // 14: contents.v1.ArticleStatus
	(ArticleSectionHomepage)(0),             // 15: contents.v1.ArticleSectionHomepage
	(*timestamppb.Timestamp)(nil),           // 16: google.protobuf.Timestamp
	(*Tag)(nil),                             // 17: contents.v1.Tag
	(*Category1)(nil),                       // 18: contents.v1.Category1
	(*Category2)(nil),                       // 19: contents.v1.Category2
	(*Category3)(nil),                       // 20: contents.v1.Category3
	(*ArticleCredit)(nil),                   // 21: contents.v1.ArticleCredit
	(*ArticleCreditCreateUpdate)(nil),       // 22: contents.v1.ArticleCreditCreateUpdate
}
var file_contents_v1_infografik_proto_depIdxs = []int32{
	14, // 0: contents.v1.Infografik.status:type_name -> contents.v1.ArticleStatus
	15, // 1: contents.v1.Infografik.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	16, // 2: contents.v1.Infografik.created_at:type_name -> google.protobuf.Timestamp
	16, // 3: contents.v1.Infografik.updated_at:type_name -> google.protobuf.Timestamp
	17, // 4: contents.v1.Infografik.tags:type_name -> contents.v1.Tag
	18, // 5: contents.v1.Infografik.category1:type_name -> contents.v1.Category1
	19, // 6: contents.v1.Infografik.category2:type_name -> contents.v1.Category2
	20, // 7: contents.v1.Infografik.category3:type_name -> contents.v1.Category3
	21, // 8: contents.v1.Infografik.credits:type_name -> contents.v1.ArticleCredit
	14, // 9: contents.v1.InfografikCreateUpdate.status:type_name -> contents.v1.ArticleStatus
	15, // 10: contents.v1.InfografikCreateUpdate.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	22, // 11: contents.v1.InfografikCreateUpdate.credits:type_name -> contents.v1.ArticleCreditCreateUpdate
	1,  // 12: contents.v1.InfografikGetOneResponse.data:type_name -> contents.v1.Infografik
	14, // 13: contents.v1.InfografikGetListRequest.status:type_name -> contents.v1.ArticleStatus
	14, // 14: contents.v1.InfografikGetListRequest.status_multiple:type_name -> contents.v1.ArticleStatus
	15, // 15: contents.v1.InfografikGetListRequest.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	0,  // 16: contents.v1.InfografikGetListRequest.sort_by:type_name -> contents.v1.InfografikGetListRequest.Sort
	1,  // 17: contents.v1.InfografikGetListResponse.data:type_name -> contents.v1.Infografik
	1,  // 18: contents.v1.InfografikGetListStreamResponse.data:type_name -> contents.v1.Infografik
	2,  // 19: contents.v1.InfografikCreateRequest.data:type_name -> contents.v1.InfografikCreateUpdate
	1,  // 20: contents.v1.InfografikCreateResponse.data:type_name -> contents.v1.Infografik
	2,  // 21: contents.v1.InfografikUpdateRequest.data:type_name -> contents.v1.InfografikCreateUpdate
	1,  // 22: contents.v1.InfografikUpdateResponse.data:type_name -> contents.v1.Infografik
	1,  // 23: contents.v1.InfografikDeleteResponse.data:type_name -> contents.v1.Infografik
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_contents_v1_infografik_proto_init() }
func file_contents_v1_infografik_proto_init() {
	if File_contents_v1_infografik_proto != nil {
		return
	}
	file_contents_v1_tag_proto_init()
	file_contents_v1_category_proto_init()
	file_contents_v1_article_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contents_v1_infografik_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infografik); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikCreateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikGetOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikGetOneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikGetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikGetListStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_infografik_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfografikDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contents_v1_infografik_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contents_v1_infografik_proto_goTypes,
		DependencyIndexes: file_contents_v1_infografik_proto_depIdxs,
		EnumInfos:         file_contents_v1_infografik_proto_enumTypes,
		MessageInfos:      file_contents_v1_infografik_proto_msgTypes,
	}.Build()
	File_contents_v1_infografik_proto = out.File
	file_contents_v1_infografik_proto_rawDesc = nil
	file_contents_v1_infografik_proto_goTypes = nil
	file_contents_v1_infografik_proto_depIdxs = nil
}
