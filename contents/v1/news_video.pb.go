// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.2
// source: contents/v1/news_video.proto

package contents_grpc

import (
	v1 "github.com/dvp-dev/matamata-grpc-generated-go/admin/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsVideoGetListRequest_Sort int32

const (
	NewsVideoGetListRequest_TITLE_ASCENDING_UNSPECIFIED NewsVideoGetListRequest_Sort = 0
	NewsVideoGetListRequest_TITLE_DESCENDING            NewsVideoGetListRequest_Sort = 1
	NewsVideoGetListRequest_OLDEST                      NewsVideoGetListRequest_Sort = 2
	NewsVideoGetListRequest_NEWEST                      NewsVideoGetListRequest_Sort = 3
	NewsVideoGetListRequest_ENERGY_HIGHEST              NewsVideoGetListRequest_Sort = 4
	NewsVideoGetListRequest_ENERGY_LOWEST               NewsVideoGetListRequest_Sort = 5
	NewsVideoGetListRequest_CREATED_AT_ASCENDING        NewsVideoGetListRequest_Sort = 6
	NewsVideoGetListRequest_CREATED_AT_DESCENDING       NewsVideoGetListRequest_Sort = 7
	NewsVideoGetListRequest_PUBLISHED_AT_ASCENDING      NewsVideoGetListRequest_Sort = 8
	NewsVideoGetListRequest_PUBLISHED_AT_DESCENDING     NewsVideoGetListRequest_Sort = 9
)

// Enum value maps for NewsVideoGetListRequest_Sort.
var (
	NewsVideoGetListRequest_Sort_name = map[int32]string{
		0: "TITLE_ASCENDING_UNSPECIFIED",
		1: "TITLE_DESCENDING",
		2: "OLDEST",
		3: "NEWEST",
		4: "ENERGY_HIGHEST",
		5: "ENERGY_LOWEST",
		6: "CREATED_AT_ASCENDING",
		7: "CREATED_AT_DESCENDING",
		8: "PUBLISHED_AT_ASCENDING",
		9: "PUBLISHED_AT_DESCENDING",
	}
	NewsVideoGetListRequest_Sort_value = map[string]int32{
		"TITLE_ASCENDING_UNSPECIFIED": 0,
		"TITLE_DESCENDING":            1,
		"OLDEST":                      2,
		"NEWEST":                      3,
		"ENERGY_HIGHEST":              4,
		"ENERGY_LOWEST":               5,
		"CREATED_AT_ASCENDING":        6,
		"CREATED_AT_DESCENDING":       7,
		"PUBLISHED_AT_ASCENDING":      8,
		"PUBLISHED_AT_DESCENDING":     9,
	}
)

func (x NewsVideoGetListRequest_Sort) Enum() *NewsVideoGetListRequest_Sort {
	p := new(NewsVideoGetListRequest_Sort)
	*p = x
	return p
}

func (x NewsVideoGetListRequest_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsVideoGetListRequest_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_contents_v1_news_video_proto_enumTypes[0].Descriptor()
}

func (NewsVideoGetListRequest_Sort) Type() protoreflect.EnumType {
	return &file_contents_v1_news_video_proto_enumTypes[0]
}

func (x NewsVideoGetListRequest_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewsVideoGetListRequest_Sort.Descriptor instead.
func (NewsVideoGetListRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{5, 0}
}

type ArticleVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VideoLink string `protobuf:"bytes,2,opt,name=video_link,json=videoLink,proto3" json:"video_link,omitempty"`
}

func (x *ArticleVideo) Reset() {
	*x = ArticleVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleVideo) ProtoMessage() {}

func (x *ArticleVideo) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleVideo.ProtoReflect.Descriptor instead.
func (*ArticleVideo) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{0}
}

func (x *ArticleVideo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleVideo) GetVideoLink() string {
	if x != nil {
		return x.VideoLink
	}
	return ""
}

type NewsVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId_1          int32                  `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2          int32                  `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3          int32                  `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Title                 string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Lead                  string                 `protobuf:"bytes,6,opt,name=lead,proto3" json:"lead,omitempty"`
	Content               string                 `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	ImageCoverUrl         string                 `protobuf:"bytes,8,opt,name=image_cover_url,json=imageCoverUrl,proto3" json:"image_cover_url,omitempty"`
	ImageCoverUrlOriginal string                 `protobuf:"bytes,19,opt,name=image_cover_url_original,json=imageCoverUrlOriginal,proto3" json:"image_cover_url_original,omitempty"`
	ImageCoverCaption     string                 `protobuf:"bytes,9,opt,name=image_cover_caption,json=imageCoverCaption,proto3" json:"image_cover_caption,omitempty"`
	ImageCoverAlt         string                 `protobuf:"bytes,18,opt,name=image_cover_alt,json=imageCoverAlt,proto3" json:"image_cover_alt,omitempty"`
	Slug                  string                 `protobuf:"bytes,14,opt,name=slug,proto3" json:"slug,omitempty"`
	Energy                int32                  `protobuf:"varint,16,opt,name=energy,proto3" json:"energy,omitempty"`
	Type                  ArticleType            `protobuf:"varint,17,opt,name=type,proto3,enum=contents.v1.ArticleType" json:"type,omitempty"`
	Status                ArticleStatus          `protobuf:"varint,10,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	SectionHomepage       ArticleSectionHomepage `protobuf:"varint,13,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	Special               int32                  `protobuf:"varint,20,opt,name=special,proto3" json:"special,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PublishedAt           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Video                 *ArticleVideo          `protobuf:"bytes,55,opt,name=video,proto3" json:"video,omitempty"`
	Tags                  []*Tag                 `protobuf:"bytes,51,rep,name=tags,proto3" json:"tags,omitempty"`
	Category1             *Category1             `protobuf:"bytes,52,opt,name=category1,proto3" json:"category1,omitempty"`
	Category2             *Category2             `protobuf:"bytes,53,opt,name=category2,proto3" json:"category2,omitempty"`
	Category3             *Category3             `protobuf:"bytes,54,opt,name=category3,proto3" json:"category3,omitempty"`
	Seo                   *ArticleSEO            `protobuf:"bytes,56,opt,name=seo,proto3" json:"seo,omitempty"`
	AdminCreated          *v1.Admin              `protobuf:"bytes,57,opt,name=admin_created,json=adminCreated,proto3" json:"admin_created,omitempty"`
	Credits               []*ArticleCredit       `protobuf:"bytes,101,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *NewsVideo) Reset() {
	*x = NewsVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideo) ProtoMessage() {}

func (x *NewsVideo) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideo.ProtoReflect.Descriptor instead.
func (*NewsVideo) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{1}
}

func (x *NewsVideo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsVideo) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *NewsVideo) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *NewsVideo) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *NewsVideo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsVideo) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *NewsVideo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsVideo) GetImageCoverUrl() string {
	if x != nil {
		return x.ImageCoverUrl
	}
	return ""
}

func (x *NewsVideo) GetImageCoverUrlOriginal() string {
	if x != nil {
		return x.ImageCoverUrlOriginal
	}
	return ""
}

func (x *NewsVideo) GetImageCoverCaption() string {
	if x != nil {
		return x.ImageCoverCaption
	}
	return ""
}

func (x *NewsVideo) GetImageCoverAlt() string {
	if x != nil {
		return x.ImageCoverAlt
	}
	return ""
}

func (x *NewsVideo) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewsVideo) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *NewsVideo) GetType() ArticleType {
	if x != nil {
		return x.Type
	}
	return ArticleType_ARTICLE_TYPE_ARTICLE_UNSPECIFIED
}

func (x *NewsVideo) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *NewsVideo) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *NewsVideo) GetSpecial() int32 {
	if x != nil {
		return x.Special
	}
	return 0
}

func (x *NewsVideo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NewsVideo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NewsVideo) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *NewsVideo) GetVideo() *ArticleVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *NewsVideo) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NewsVideo) GetCategory1() *Category1 {
	if x != nil {
		return x.Category1
	}
	return nil
}

func (x *NewsVideo) GetCategory2() *Category2 {
	if x != nil {
		return x.Category2
	}
	return nil
}

func (x *NewsVideo) GetCategory3() *Category3 {
	if x != nil {
		return x.Category3
	}
	return nil
}

func (x *NewsVideo) GetSeo() *ArticleSEO {
	if x != nil {
		return x.Seo
	}
	return nil
}

func (x *NewsVideo) GetAdminCreated() *v1.Admin {
	if x != nil {
		return x.AdminCreated
	}
	return nil
}

func (x *NewsVideo) GetCredits() []*ArticleCredit {
	if x != nil {
		return x.Credits
	}
	return nil
}

type NewsVideoCreateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId_1          int32                        `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2          int32                        `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3          int32                        `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Title                 string                       `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Lead                  string                       `protobuf:"bytes,6,opt,name=lead,proto3" json:"lead,omitempty"`
	Content               string                       `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	ImageCoverUrl         string                       `protobuf:"bytes,8,opt,name=image_cover_url,json=imageCoverUrl,proto3" json:"image_cover_url,omitempty"`
	ImageCoverUrlOriginal string                       `protobuf:"bytes,19,opt,name=image_cover_url_original,json=imageCoverUrlOriginal,proto3" json:"image_cover_url_original,omitempty"`
	ImageCoverCaption     string                       `protobuf:"bytes,9,opt,name=image_cover_caption,json=imageCoverCaption,proto3" json:"image_cover_caption,omitempty"`
	ImageCoverAlt         string                       `protobuf:"bytes,18,opt,name=image_cover_alt,json=imageCoverAlt,proto3" json:"image_cover_alt,omitempty"`
	Energy                int32                        `protobuf:"varint,11,opt,name=energy,proto3" json:"energy,omitempty"`
	Type                  ArticleType                  `protobuf:"varint,12,opt,name=type,proto3,enum=contents.v1.ArticleType" json:"type,omitempty"`
	Status                ArticleStatus                `protobuf:"varint,10,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	SectionHomepage       ArticleSectionHomepage       `protobuf:"varint,13,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	Special               int32                        `protobuf:"varint,20,opt,name=special,proto3" json:"special,omitempty"`
	IsCustomPublishedAt   bool                         `protobuf:"varint,14,opt,name=is_custom_published_at,json=isCustomPublishedAt,proto3" json:"is_custom_published_at,omitempty"`
	PublishedAt           *timestamppb.Timestamp       `protobuf:"bytes,15,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Video                 *ArticleVideo                `protobuf:"bytes,53,opt,name=video,proto3" json:"video,omitempty"`
	Seo                   *ArticleSEO                  `protobuf:"bytes,56,opt,name=seo,proto3" json:"seo,omitempty"`
	TagIds                []int32                      `protobuf:"varint,51,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	Credits               []*ArticleCreditCreateUpdate `protobuf:"bytes,52,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *NewsVideoCreateUpdate) Reset() {
	*x = NewsVideoCreateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoCreateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoCreateUpdate) ProtoMessage() {}

func (x *NewsVideoCreateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoCreateUpdate.ProtoReflect.Descriptor instead.
func (*NewsVideoCreateUpdate) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{2}
}

func (x *NewsVideoCreateUpdate) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *NewsVideoCreateUpdate) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *NewsVideoCreateUpdate) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *NewsVideoCreateUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetImageCoverUrl() string {
	if x != nil {
		return x.ImageCoverUrl
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetImageCoverUrlOriginal() string {
	if x != nil {
		return x.ImageCoverUrlOriginal
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetImageCoverCaption() string {
	if x != nil {
		return x.ImageCoverCaption
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetImageCoverAlt() string {
	if x != nil {
		return x.ImageCoverAlt
	}
	return ""
}

func (x *NewsVideoCreateUpdate) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *NewsVideoCreateUpdate) GetType() ArticleType {
	if x != nil {
		return x.Type
	}
	return ArticleType_ARTICLE_TYPE_ARTICLE_UNSPECIFIED
}

func (x *NewsVideoCreateUpdate) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *NewsVideoCreateUpdate) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *NewsVideoCreateUpdate) GetSpecial() int32 {
	if x != nil {
		return x.Special
	}
	return 0
}

func (x *NewsVideoCreateUpdate) GetIsCustomPublishedAt() bool {
	if x != nil {
		return x.IsCustomPublishedAt
	}
	return false
}

func (x *NewsVideoCreateUpdate) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *NewsVideoCreateUpdate) GetVideo() *ArticleVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *NewsVideoCreateUpdate) GetSeo() *ArticleSEO {
	if x != nil {
		return x.Seo
	}
	return nil
}

func (x *NewsVideoCreateUpdate) GetTagIds() []int32 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *NewsVideoCreateUpdate) GetCredits() []*ArticleCreditCreateUpdate {
	if x != nil {
		return x.Credits
	}
	return nil
}

type NewsVideoGetOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SearchBySlug     string `protobuf:"bytes,2,opt,name=search_by_slug,json=searchBySlug,proto3" json:"search_by_slug,omitempty"`
	WithAdminCreated bool   `protobuf:"varint,3,opt,name=with_admin_created,json=withAdminCreated,proto3" json:"with_admin_created,omitempty"`
}

func (x *NewsVideoGetOneRequest) Reset() {
	*x = NewsVideoGetOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoGetOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoGetOneRequest) ProtoMessage() {}

func (x *NewsVideoGetOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoGetOneRequest.ProtoReflect.Descriptor instead.
func (*NewsVideoGetOneRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{3}
}

func (x *NewsVideoGetOneRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsVideoGetOneRequest) GetSearchBySlug() string {
	if x != nil {
		return x.SearchBySlug
	}
	return ""
}

func (x *NewsVideoGetOneRequest) GetWithAdminCreated() bool {
	if x != nil {
		return x.WithAdminCreated
	}
	return false
}

type NewsVideoGetOneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsVideo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsVideoGetOneResponse) Reset() {
	*x = NewsVideoGetOneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoGetOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoGetOneResponse) ProtoMessage() {}

func (x *NewsVideoGetOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoGetOneResponse.ProtoReflect.Descriptor instead.
func (*NewsVideoGetOneResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{4}
}

func (x *NewsVideoGetOneResponse) GetData() *NewsVideo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsVideoGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           ArticleStatus                `protobuf:"varint,1,opt,name=status,proto3,enum=contents.v1.ArticleStatus" json:"status,omitempty"`
	StatusMultiple   []ArticleStatus              `protobuf:"varint,9,rep,packed,name=status_multiple,json=statusMultiple,proto3,enum=contents.v1.ArticleStatus" json:"status_multiple,omitempty"`
	Type             ArticleType                  `protobuf:"varint,12,opt,name=type,proto3,enum=contents.v1.ArticleType" json:"type,omitempty"`
	Types            []ArticleType                `protobuf:"varint,11,rep,packed,name=types,proto3,enum=contents.v1.ArticleType" json:"types,omitempty"`
	SectionHomepage  ArticleSectionHomepage       `protobuf:"varint,10,opt,name=section_homepage,json=sectionHomepage,proto3,enum=contents.v1.ArticleSectionHomepage" json:"section_homepage,omitempty"`
	CategoryId_1     int32                        `protobuf:"varint,2,opt,name=category_id_1,json=categoryId1,proto3" json:"category_id_1,omitempty"`
	CategoryId_2     int32                        `protobuf:"varint,3,opt,name=category_id_2,json=categoryId2,proto3" json:"category_id_2,omitempty"`
	CategoryId_3     int32                        `protobuf:"varint,4,opt,name=category_id_3,json=categoryId3,proto3" json:"category_id_3,omitempty"`
	Search           string                       `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	AdminId          int32                        `protobuf:"varint,14,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                        // will be filter based on credits
	AdminCreatedId   int32                        `protobuf:"varint,15,opt,name=admin_created_id,json=adminCreatedId,proto3" json:"admin_created_id,omitempty"` // will be filter based on who admin created this article
	Special          int32                        `protobuf:"varint,16,opt,name=special,proto3" json:"special,omitempty"`
	Page             int32                        `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	ContentPerPage   int32                        `protobuf:"varint,8,opt,name=content_per_page,json=contentPerPage,proto3" json:"content_per_page,omitempty"`
	WithAdminCreated bool                         `protobuf:"varint,13,opt,name=with_admin_created,json=withAdminCreated,proto3" json:"with_admin_created,omitempty"`
	SortBy           NewsVideoGetListRequest_Sort `protobuf:"varint,5,opt,name=sort_by,json=sortBy,proto3,enum=contents.v1.NewsVideoGetListRequest_Sort" json:"sort_by,omitempty"`
}

func (x *NewsVideoGetListRequest) Reset() {
	*x = NewsVideoGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoGetListRequest) ProtoMessage() {}

func (x *NewsVideoGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoGetListRequest.ProtoReflect.Descriptor instead.
func (*NewsVideoGetListRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{5}
}

func (x *NewsVideoGetListRequest) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ALL_UNSPECIFIED
}

func (x *NewsVideoGetListRequest) GetStatusMultiple() []ArticleStatus {
	if x != nil {
		return x.StatusMultiple
	}
	return nil
}

func (x *NewsVideoGetListRequest) GetType() ArticleType {
	if x != nil {
		return x.Type
	}
	return ArticleType_ARTICLE_TYPE_ARTICLE_UNSPECIFIED
}

func (x *NewsVideoGetListRequest) GetTypes() []ArticleType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *NewsVideoGetListRequest) GetSectionHomepage() ArticleSectionHomepage {
	if x != nil {
		return x.SectionHomepage
	}
	return ArticleSectionHomepage_ARTICLE_SECTION_HOMEPAGE_ALL_UNSPECIFIED
}

func (x *NewsVideoGetListRequest) GetCategoryId_1() int32 {
	if x != nil {
		return x.CategoryId_1
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetCategoryId_2() int32 {
	if x != nil {
		return x.CategoryId_2
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetCategoryId_3() int32 {
	if x != nil {
		return x.CategoryId_3
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *NewsVideoGetListRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetAdminCreatedId() int32 {
	if x != nil {
		return x.AdminCreatedId
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetSpecial() int32 {
	if x != nil {
		return x.Special
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetContentPerPage() int32 {
	if x != nil {
		return x.ContentPerPage
	}
	return 0
}

func (x *NewsVideoGetListRequest) GetWithAdminCreated() bool {
	if x != nil {
		return x.WithAdminCreated
	}
	return false
}

func (x *NewsVideoGetListRequest) GetSortBy() NewsVideoGetListRequest_Sort {
	if x != nil {
		return x.SortBy
	}
	return NewsVideoGetListRequest_TITLE_ASCENDING_UNSPECIFIED
}

type NewsVideoGetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*NewsVideo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	MaxPage int32        `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	Count   int32        `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NewsVideoGetListResponse) Reset() {
	*x = NewsVideoGetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoGetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoGetListResponse) ProtoMessage() {}

func (x *NewsVideoGetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoGetListResponse.ProtoReflect.Descriptor instead.
func (*NewsVideoGetListResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{6}
}

func (x *NewsVideoGetListResponse) GetData() []*NewsVideo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NewsVideoGetListResponse) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *NewsVideoGetListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type NewsVideoGetListStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *NewsVideo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxPage int32      `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	Count   int32      `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NewsVideoGetListStreamResponse) Reset() {
	*x = NewsVideoGetListStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoGetListStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoGetListStreamResponse) ProtoMessage() {}

func (x *NewsVideoGetListStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoGetListStreamResponse.ProtoReflect.Descriptor instead.
func (*NewsVideoGetListStreamResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{7}
}

func (x *NewsVideoGetListStreamResponse) GetData() *NewsVideo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NewsVideoGetListStreamResponse) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *NewsVideoGetListStreamResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type NewsVideoCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsVideoCreateUpdate `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsVideoCreateRequest) Reset() {
	*x = NewsVideoCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoCreateRequest) ProtoMessage() {}

func (x *NewsVideoCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoCreateRequest.ProtoReflect.Descriptor instead.
func (*NewsVideoCreateRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{8}
}

func (x *NewsVideoCreateRequest) GetData() *NewsVideoCreateUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsVideoCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsVideo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsVideoCreateResponse) Reset() {
	*x = NewsVideoCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoCreateResponse) ProtoMessage() {}

func (x *NewsVideoCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoCreateResponse.ProtoReflect.Descriptor instead.
func (*NewsVideoCreateResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{9}
}

func (x *NewsVideoCreateResponse) GetData() *NewsVideo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsVideoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *NewsVideoCreateUpdate `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsVideoUpdateRequest) Reset() {
	*x = NewsVideoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoUpdateRequest) ProtoMessage() {}

func (x *NewsVideoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoUpdateRequest.ProtoReflect.Descriptor instead.
func (*NewsVideoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{10}
}

func (x *NewsVideoUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsVideoUpdateRequest) GetData() *NewsVideoCreateUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsVideoUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsVideo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsVideoUpdateResponse) Reset() {
	*x = NewsVideoUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoUpdateResponse) ProtoMessage() {}

func (x *NewsVideoUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoUpdateResponse.ProtoReflect.Descriptor instead.
func (*NewsVideoUpdateResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{11}
}

func (x *NewsVideoUpdateResponse) GetData() *NewsVideo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsVideoDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SoftDelete bool  `protobuf:"varint,2,opt,name=soft_delete,json=softDelete,proto3" json:"soft_delete,omitempty"`
}

func (x *NewsVideoDeleteRequest) Reset() {
	*x = NewsVideoDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoDeleteRequest) ProtoMessage() {}

func (x *NewsVideoDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoDeleteRequest.ProtoReflect.Descriptor instead.
func (*NewsVideoDeleteRequest) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{12}
}

func (x *NewsVideoDeleteRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsVideoDeleteRequest) GetSoftDelete() bool {
	if x != nil {
		return x.SoftDelete
	}
	return false
}

type NewsVideoDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewsVideo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsVideoDeleteResponse) Reset() {
	*x = NewsVideoDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contents_v1_news_video_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsVideoDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsVideoDeleteResponse) ProtoMessage() {}

func (x *NewsVideoDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contents_v1_news_video_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsVideoDeleteResponse.ProtoReflect.Descriptor instead.
func (*NewsVideoDeleteResponse) Descriptor() ([]byte, []int) {
	return file_contents_v1_news_video_proto_rawDescGZIP(), []int{13}
}

func (x *NewsVideoDeleteResponse) GetData() *NewsVideo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_contents_v1_news_video_proto protoreflect.FileDescriptor

var file_contents_v1_news_video_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x77, 0x73, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3d, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x22,
	0xc1, 0x09, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x33, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x31, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x31,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x52, 0x09, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x33, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x33, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x12, 0x29, 0x0a, 0x03,
	0x73, 0x65, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x45, 0x4f, 0x52, 0x03, 0x73, 0x65, 0x6f, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x22, 0x8f, 0x07, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x29, 0x0a, 0x03, 0x73, 0x65, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x45, 0x4f, 0x52, 0x03, 0x73, 0x65, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x34,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x07, 0x0a, 0x17, 0x4e,
	0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x22, 0xea, 0x01, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4c, 0x44, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x41, 0x53,
	0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x5f, 0x41, 0x54, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x22, 0x77, 0x0a,
	0x18, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x1e, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60,
	0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x45, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x70, 0x2d, 0x64, 0x65, 0x76, 0x2f,
	0x6d, 0x61, 0x74, 0x61, 0x6d, 0x61, 0x74, 0x61, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contents_v1_news_video_proto_rawDescOnce sync.Once
	file_contents_v1_news_video_proto_rawDescData = file_contents_v1_news_video_proto_rawDesc
)

func file_contents_v1_news_video_proto_rawDescGZIP() []byte {
	file_contents_v1_news_video_proto_rawDescOnce.Do(func() {
		file_contents_v1_news_video_proto_rawDescData = protoimpl.X.CompressGZIP(file_contents_v1_news_video_proto_rawDescData)
	})
	return file_contents_v1_news_video_proto_rawDescData
}

var file_contents_v1_news_video_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_contents_v1_news_video_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_contents_v1_news_video_proto_goTypes = []interface{}{
	(NewsVideoGetListRequest_Sort)(0),      // 0: contents.v1.NewsVideoGetListRequest.Sort
	(*ArticleVideo)(nil),                   // 1: contents.v1.ArticleVideo
	(*NewsVideo)(nil),                      // 2: contents.v1.NewsVideo
	(*NewsVideoCreateUpdate)(nil),          // 3: contents.v1.NewsVideoCreateUpdate
	(*NewsVideoGetOneRequest)(nil),         // 4: contents.v1.NewsVideoGetOneRequest
	(*NewsVideoGetOneResponse)(nil),        // 5: contents.v1.NewsVideoGetOneResponse
	(*NewsVideoGetListRequest)(nil),        // 6: contents.v1.NewsVideoGetListRequest
	(*NewsVideoGetListResponse)(nil),       // 7: contents.v1.NewsVideoGetListResponse
	(*NewsVideoGetListStreamResponse)(nil), // 8: contents.v1.NewsVideoGetListStreamResponse
	(*NewsVideoCreateRequest)(nil),         // 9: contents.v1.NewsVideoCreateRequest
	(*NewsVideoCreateResponse)(nil),        // 10: contents.v1.NewsVideoCreateResponse
	(*NewsVideoUpdateRequest)(nil),         // 11: contents.v1.NewsVideoUpdateRequest
	(*NewsVideoUpdateResponse)(nil),        // 12: contents.v1.NewsVideoUpdateResponse
	(*NewsVideoDeleteRequest)(nil),         // 13: contents.v1.NewsVideoDeleteRequest
	(*NewsVideoDeleteResponse)(nil),        // 14: contents.v1.NewsVideoDeleteResponse
	(ArticleType)(0),                       // 15: contents.v1.ArticleType
	(ArticleStatus)(0),                     // 16: contents.v1.ArticleStatus
	(ArticleSectionHomepage)(0),            // 17: contents.v1.ArticleSectionHomepage
	(*timestamppb.Timestamp)(nil),          // 18: google.protobuf.Timestamp
	(*Tag)(nil),                            // 19: contents.v1.Tag
	(*Category1)(nil),                      // 20: contents.v1.Category1
	(*Category2)(nil),                      // 21: contents.v1.Category2
	(*Category3)(nil),                      // 22: contents.v1.Category3
	(*ArticleSEO)(nil),                     // 23: contents.v1.ArticleSEO
	(*v1.Admin)(nil),                       // 24: admin.v1.Admin
	(*ArticleCredit)(nil),                  // 25: contents.v1.ArticleCredit
	(*ArticleCreditCreateUpdate)(nil),      // 26: contents.v1.ArticleCreditCreateUpdate
}
var file_contents_v1_news_video_proto_depIdxs = []int32{
	15, // 0: contents.v1.NewsVideo.type:type_name -> contents.v1.ArticleType
	16, // 1: contents.v1.NewsVideo.status:type_name -> contents.v1.ArticleStatus
	17, // 2: contents.v1.NewsVideo.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	18, // 3: contents.v1.NewsVideo.created_at:type_name -> google.protobuf.Timestamp
	18, // 4: contents.v1.NewsVideo.updated_at:type_name -> google.protobuf.Timestamp
	18, // 5: contents.v1.NewsVideo.published_at:type_name -> google.protobuf.Timestamp
	1,  // 6: contents.v1.NewsVideo.video:type_name -> contents.v1.ArticleVideo
	19, // 7: contents.v1.NewsVideo.tags:type_name -> contents.v1.Tag
	20, // 8: contents.v1.NewsVideo.category1:type_name -> contents.v1.Category1
	21, // 9: contents.v1.NewsVideo.category2:type_name -> contents.v1.Category2
	22, // 10: contents.v1.NewsVideo.category3:type_name -> contents.v1.Category3
	23, // 11: contents.v1.NewsVideo.seo:type_name -> contents.v1.ArticleSEO
	24, // 12: contents.v1.NewsVideo.admin_created:type_name -> admin.v1.Admin
	25, // 13: contents.v1.NewsVideo.credits:type_name -> contents.v1.ArticleCredit
	15, // 14: contents.v1.NewsVideoCreateUpdate.type:type_name -> contents.v1.ArticleType
	16, // 15: contents.v1.NewsVideoCreateUpdate.status:type_name -> contents.v1.ArticleStatus
	17, // 16: contents.v1.NewsVideoCreateUpdate.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	18, // 17: contents.v1.NewsVideoCreateUpdate.published_at:type_name -> google.protobuf.Timestamp
	1,  // 18: contents.v1.NewsVideoCreateUpdate.video:type_name -> contents.v1.ArticleVideo
	23, // 19: contents.v1.NewsVideoCreateUpdate.seo:type_name -> contents.v1.ArticleSEO
	26, // 20: contents.v1.NewsVideoCreateUpdate.credits:type_name -> contents.v1.ArticleCreditCreateUpdate
	2,  // 21: contents.v1.NewsVideoGetOneResponse.data:type_name -> contents.v1.NewsVideo
	16, // 22: contents.v1.NewsVideoGetListRequest.status:type_name -> contents.v1.ArticleStatus
	16, // 23: contents.v1.NewsVideoGetListRequest.status_multiple:type_name -> contents.v1.ArticleStatus
	15, // 24: contents.v1.NewsVideoGetListRequest.type:type_name -> contents.v1.ArticleType
	15, // 25: contents.v1.NewsVideoGetListRequest.types:type_name -> contents.v1.ArticleType
	17, // 26: contents.v1.NewsVideoGetListRequest.section_homepage:type_name -> contents.v1.ArticleSectionHomepage
	0,  // 27: contents.v1.NewsVideoGetListRequest.sort_by:type_name -> contents.v1.NewsVideoGetListRequest.Sort
	2,  // 28: contents.v1.NewsVideoGetListResponse.data:type_name -> contents.v1.NewsVideo
	2,  // 29: contents.v1.NewsVideoGetListStreamResponse.data:type_name -> contents.v1.NewsVideo
	3,  // 30: contents.v1.NewsVideoCreateRequest.data:type_name -> contents.v1.NewsVideoCreateUpdate
	2,  // 31: contents.v1.NewsVideoCreateResponse.data:type_name -> contents.v1.NewsVideo
	3,  // 32: contents.v1.NewsVideoUpdateRequest.data:type_name -> contents.v1.NewsVideoCreateUpdate
	2,  // 33: contents.v1.NewsVideoUpdateResponse.data:type_name -> contents.v1.NewsVideo
	2,  // 34: contents.v1.NewsVideoDeleteResponse.data:type_name -> contents.v1.NewsVideo
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_contents_v1_news_video_proto_init() }
func file_contents_v1_news_video_proto_init() {
	if File_contents_v1_news_video_proto != nil {
		return
	}
	file_contents_v1_tag_proto_init()
	file_contents_v1_category_proto_init()
	file_contents_v1_article_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contents_v1_news_video_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoCreateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoGetOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoGetOneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoGetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoGetListStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contents_v1_news_video_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsVideoDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contents_v1_news_video_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contents_v1_news_video_proto_goTypes,
		DependencyIndexes: file_contents_v1_news_video_proto_depIdxs,
		EnumInfos:         file_contents_v1_news_video_proto_enumTypes,
		MessageInfos:      file_contents_v1_news_video_proto_msgTypes,
	}.Build()
	File_contents_v1_news_video_proto = out.File
	file_contents_v1_news_video_proto_rawDesc = nil
	file_contents_v1_news_video_proto_goTypes = nil
	file_contents_v1_news_video_proto_depIdxs = nil
}
