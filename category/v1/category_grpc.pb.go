// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package category

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	GetAllLevelOne(ctx context.Context, in *GetAllLevelOneRequest, opts ...grpc.CallOption) (*GetAllLevelOneResponse, error)
	GetOneLevelOne(ctx context.Context, in *GetOneLevelOneRequest, opts ...grpc.CallOption) (*GetOneLevelOneResponse, error)
	InsertLevelOne(ctx context.Context, in *InsertLevelOneRequest, opts ...grpc.CallOption) (*InsertLevelOneResponse, error)
	GetLevelTwo(ctx context.Context, in *GetLevelTwoRequest, opts ...grpc.CallOption) (*GetLevelTwoResponse, error)
	GetOneLevelTwo(ctx context.Context, in *GetOneLevelTwoRequest, opts ...grpc.CallOption) (*GetOneLevelTwoResponse, error)
	InsertLevelTwo(ctx context.Context, in *InsertLevelTwoRequest, opts ...grpc.CallOption) (*InsertLevelTwoResponse, error)
	GetLevelThree(ctx context.Context, in *GetLevelThreeRequest, opts ...grpc.CallOption) (*GetLevelThreeResponse, error)
	GetOneLevelThree(ctx context.Context, in *GetOneLevelThreeRequest, opts ...grpc.CallOption) (*GetOneLevelThreeResponse, error)
	InsertLevelThree(ctx context.Context, in *InsertLevelThreeRequest, opts ...grpc.CallOption) (*InsertLevelThreeResponse, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) GetAllLevelOne(ctx context.Context, in *GetAllLevelOneRequest, opts ...grpc.CallOption) (*GetAllLevelOneResponse, error) {
	out := new(GetAllLevelOneResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/GetAllLevelOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetOneLevelOne(ctx context.Context, in *GetOneLevelOneRequest, opts ...grpc.CallOption) (*GetOneLevelOneResponse, error) {
	out := new(GetOneLevelOneResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/GetOneLevelOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) InsertLevelOne(ctx context.Context, in *InsertLevelOneRequest, opts ...grpc.CallOption) (*InsertLevelOneResponse, error) {
	out := new(InsertLevelOneResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/InsertLevelOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetLevelTwo(ctx context.Context, in *GetLevelTwoRequest, opts ...grpc.CallOption) (*GetLevelTwoResponse, error) {
	out := new(GetLevelTwoResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/GetLevelTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetOneLevelTwo(ctx context.Context, in *GetOneLevelTwoRequest, opts ...grpc.CallOption) (*GetOneLevelTwoResponse, error) {
	out := new(GetOneLevelTwoResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/GetOneLevelTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) InsertLevelTwo(ctx context.Context, in *InsertLevelTwoRequest, opts ...grpc.CallOption) (*InsertLevelTwoResponse, error) {
	out := new(InsertLevelTwoResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/InsertLevelTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetLevelThree(ctx context.Context, in *GetLevelThreeRequest, opts ...grpc.CallOption) (*GetLevelThreeResponse, error) {
	out := new(GetLevelThreeResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/GetLevelThree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetOneLevelThree(ctx context.Context, in *GetOneLevelThreeRequest, opts ...grpc.CallOption) (*GetOneLevelThreeResponse, error) {
	out := new(GetOneLevelThreeResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/GetOneLevelThree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) InsertLevelThree(ctx context.Context, in *InsertLevelThreeRequest, opts ...grpc.CallOption) (*InsertLevelThreeResponse, error) {
	out := new(InsertLevelThreeResponse)
	err := c.cc.Invoke(ctx, "/category.v1.CategoryService/InsertLevelThree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility
type CategoryServiceServer interface {
	GetAllLevelOne(context.Context, *GetAllLevelOneRequest) (*GetAllLevelOneResponse, error)
	GetOneLevelOne(context.Context, *GetOneLevelOneRequest) (*GetOneLevelOneResponse, error)
	InsertLevelOne(context.Context, *InsertLevelOneRequest) (*InsertLevelOneResponse, error)
	GetLevelTwo(context.Context, *GetLevelTwoRequest) (*GetLevelTwoResponse, error)
	GetOneLevelTwo(context.Context, *GetOneLevelTwoRequest) (*GetOneLevelTwoResponse, error)
	InsertLevelTwo(context.Context, *InsertLevelTwoRequest) (*InsertLevelTwoResponse, error)
	GetLevelThree(context.Context, *GetLevelThreeRequest) (*GetLevelThreeResponse, error)
	GetOneLevelThree(context.Context, *GetOneLevelThreeRequest) (*GetOneLevelThreeResponse, error)
	InsertLevelThree(context.Context, *InsertLevelThreeRequest) (*InsertLevelThreeResponse, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServiceServer struct {
}

func (UnimplementedCategoryServiceServer) GetAllLevelOne(context.Context, *GetAllLevelOneRequest) (*GetAllLevelOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLevelOne not implemented")
}
func (UnimplementedCategoryServiceServer) GetOneLevelOne(context.Context, *GetOneLevelOneRequest) (*GetOneLevelOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneLevelOne not implemented")
}
func (UnimplementedCategoryServiceServer) InsertLevelOne(context.Context, *InsertLevelOneRequest) (*InsertLevelOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLevelOne not implemented")
}
func (UnimplementedCategoryServiceServer) GetLevelTwo(context.Context, *GetLevelTwoRequest) (*GetLevelTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelTwo not implemented")
}
func (UnimplementedCategoryServiceServer) GetOneLevelTwo(context.Context, *GetOneLevelTwoRequest) (*GetOneLevelTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneLevelTwo not implemented")
}
func (UnimplementedCategoryServiceServer) InsertLevelTwo(context.Context, *InsertLevelTwoRequest) (*InsertLevelTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLevelTwo not implemented")
}
func (UnimplementedCategoryServiceServer) GetLevelThree(context.Context, *GetLevelThreeRequest) (*GetLevelThreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelThree not implemented")
}
func (UnimplementedCategoryServiceServer) GetOneLevelThree(context.Context, *GetOneLevelThreeRequest) (*GetOneLevelThreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneLevelThree not implemented")
}
func (UnimplementedCategoryServiceServer) InsertLevelThree(context.Context, *InsertLevelThreeRequest) (*InsertLevelThreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLevelThree not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_GetAllLevelOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLevelOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetAllLevelOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/GetAllLevelOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetAllLevelOne(ctx, req.(*GetAllLevelOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetOneLevelOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneLevelOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetOneLevelOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/GetOneLevelOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetOneLevelOne(ctx, req.(*GetOneLevelOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_InsertLevelOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLevelOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).InsertLevelOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/InsertLevelOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).InsertLevelOne(ctx, req.(*InsertLevelOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetLevelTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetLevelTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/GetLevelTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetLevelTwo(ctx, req.(*GetLevelTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetOneLevelTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneLevelTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetOneLevelTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/GetOneLevelTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetOneLevelTwo(ctx, req.(*GetOneLevelTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_InsertLevelTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLevelTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).InsertLevelTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/InsertLevelTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).InsertLevelTwo(ctx, req.(*InsertLevelTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetLevelThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelThreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetLevelThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/GetLevelThree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetLevelThree(ctx, req.(*GetLevelThreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetOneLevelThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneLevelThreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetOneLevelThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/GetOneLevelThree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetOneLevelThree(ctx, req.(*GetOneLevelThreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_InsertLevelThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLevelThreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).InsertLevelThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.v1.CategoryService/InsertLevelThree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).InsertLevelThree(ctx, req.(*InsertLevelThreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "category.v1.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllLevelOne",
			Handler:    _CategoryService_GetAllLevelOne_Handler,
		},
		{
			MethodName: "GetOneLevelOne",
			Handler:    _CategoryService_GetOneLevelOne_Handler,
		},
		{
			MethodName: "InsertLevelOne",
			Handler:    _CategoryService_InsertLevelOne_Handler,
		},
		{
			MethodName: "GetLevelTwo",
			Handler:    _CategoryService_GetLevelTwo_Handler,
		},
		{
			MethodName: "GetOneLevelTwo",
			Handler:    _CategoryService_GetOneLevelTwo_Handler,
		},
		{
			MethodName: "InsertLevelTwo",
			Handler:    _CategoryService_InsertLevelTwo_Handler,
		},
		{
			MethodName: "GetLevelThree",
			Handler:    _CategoryService_GetLevelThree_Handler,
		},
		{
			MethodName: "GetOneLevelThree",
			Handler:    _CategoryService_GetOneLevelThree_Handler,
		},
		{
			MethodName: "InsertLevelThree",
			Handler:    _CategoryService_InsertLevelThree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category/v1/category.proto",
}
